// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: rota/v1/rota.proto

package rotav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OnCallService_GetCurrentSchedule_FullMethodName = "/rota.v1.OnCallService/GetCurrentSchedule"
)

// OnCallServiceClient is the client API for OnCallService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 排班服务定义 on call
type OnCallServiceClient interface {
	// 查找多个用户名对应的用户信息
	GetCurrentSchedule(ctx context.Context, in *GetCurrentScheduleRequest, opts ...grpc.CallOption) (*Schedule, error)
}

type onCallServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOnCallServiceClient(cc grpc.ClientConnInterface) OnCallServiceClient {
	return &onCallServiceClient{cc}
}

func (c *onCallServiceClient) GetCurrentSchedule(ctx context.Context, in *GetCurrentScheduleRequest, opts ...grpc.CallOption) (*Schedule, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Schedule)
	err := c.cc.Invoke(ctx, OnCallService_GetCurrentSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnCallServiceServer is the server API for OnCallService service.
// All implementations must embed UnimplementedOnCallServiceServer
// for forward compatibility.
//
// 排班服务定义 on call
type OnCallServiceServer interface {
	// 查找多个用户名对应的用户信息
	GetCurrentSchedule(context.Context, *GetCurrentScheduleRequest) (*Schedule, error)
	mustEmbedUnimplementedOnCallServiceServer()
}

// UnimplementedOnCallServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOnCallServiceServer struct{}

func (UnimplementedOnCallServiceServer) GetCurrentSchedule(context.Context, *GetCurrentScheduleRequest) (*Schedule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentSchedule not implemented")
}
func (UnimplementedOnCallServiceServer) mustEmbedUnimplementedOnCallServiceServer() {}
func (UnimplementedOnCallServiceServer) testEmbeddedByValue()                       {}

// UnsafeOnCallServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnCallServiceServer will
// result in compilation errors.
type UnsafeOnCallServiceServer interface {
	mustEmbedUnimplementedOnCallServiceServer()
}

func RegisterOnCallServiceServer(s grpc.ServiceRegistrar, srv OnCallServiceServer) {
	// If the following call pancis, it indicates UnimplementedOnCallServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OnCallService_ServiceDesc, srv)
}

func _OnCallService_GetCurrentSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnCallServiceServer).GetCurrentSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnCallService_GetCurrentSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnCallServiceServer).GetCurrentSchedule(ctx, req.(*GetCurrentScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OnCallService_ServiceDesc is the grpc.ServiceDesc for OnCallService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnCallService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rota.v1.OnCallService",
	HandlerType: (*OnCallServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentSchedule",
			Handler:    _OnCallService_GetCurrentSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rota/v1/rota.proto",
}
