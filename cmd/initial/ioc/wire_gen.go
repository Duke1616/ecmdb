// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"github.com/Duke1616/ecmdb/cmd/initial/version"
	"github.com/Duke1616/ecmdb/internal/department"
	"github.com/Duke1616/ecmdb/internal/menu"
	"github.com/Duke1616/ecmdb/internal/permission"
	"github.com/Duke1616/ecmdb/internal/policy"
	"github.com/Duke1616/ecmdb/internal/role"
	"github.com/Duke1616/ecmdb/internal/user"
	"github.com/Duke1616/ecmdb/ioc"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitApp() (*App, error) {
	mongo := ioc.InitMongoDB()
	client := ioc.InitRedisSearch()
	config := ioc.InitLdapConfig()
	db := ioc.InitMySQLDB()
	syncedEnforcer := ioc.InitCasbin(db)
	module, err := policy.InitModule(syncedEnforcer)
	if err != nil {
		return nil, err
	}
	departmentModule, err := department.InitModule(mongo)
	if err != nil {
		return nil, err
	}
	cmdable := ioc.InitRedis()
	provider := ioc.InitSession(cmdable)
	cryptoRegistry := ioc.InitModuleCrypto()
	userModule, err := user.InitModule(mongo, client, config, module, departmentModule, provider, cryptoRegistry)
	if err != nil {
		return nil, err
	}
	service := userModule.Svc
	roleModule, err := role.InitModule(mongo)
	if err != nil {
		return nil, err
	}
	serviceService := roleModule.Svc
	mq := ioc.InitMQ()
	menuModule, err := menu.InitModule(mq, mongo)
	if err != nil {
		return nil, err
	}
	service2 := menuModule.Svc
	permissionModule, err := permission.InitModule(mongo, mq, roleModule, menuModule, module)
	if err != nil {
		return nil, err
	}
	service3 := permissionModule.Svc
	service4 := module.Svc
	dao := version.NewDao(mongo)
	versionService := version.NewService(dao)
	app := &App{
		UserSvc:       service,
		RoleSvc:       serviceService,
		MenuSvc:       service2,
		PermissionSvc: service3,
		policySvc:     service4,
		VerSvc:        versionService,
	}
	return app, nil
}

// wire.go:

var BaseSet = wire.NewSet(ioc.InitMongoDB, ioc.InitMySQLDB, ioc.InitRedis, ioc.InitRedisSearch, ioc.InitMQ, ioc.InitEtcdClient, ioc.InitLdapConfig, ioc.InitModuleCrypto)
