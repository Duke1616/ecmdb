// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"github.com/Duke1616/ecmdb/internal/attribute"
	"github.com/Duke1616/ecmdb/internal/model"
	"github.com/Duke1616/ecmdb/internal/relation"
	"github.com/Duke1616/ecmdb/internal/resource"
	"github.com/Duke1616/ecmdb/ioc"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitApp() (*App, error) {
	mongo := ioc.InitMongoDB()
	module, err := relation.InitModule(mongo)
	if err != nil {
		return nil, err
	}
	attributeModule, err := attribute.InitModule(mongo)
	if err != nil {
		return nil, err
	}
	string2 := ioc.AesKey()
	resourceModule, err := resource.InitModule(mongo, attributeModule, module, string2)
	if err != nil {
		return nil, err
	}
	modelModule, err := model.InitModule(mongo, module, attributeModule, resourceModule)
	if err != nil {
		return nil, err
	}
	service := modelModule.Svc
	serviceService := attributeModule.Svc
	service2 := resourceModule.Svc
	app := &App{
		ModelSvc:    service,
		AttrSvc:     serviceService,
		ResourceSvc: service2,
		AesKey:      string2,
	}
	return app, nil
}

// wire.go:

var BaseSet = wire.NewSet(ioc.InitMongoDB, ioc.AesKey)
