// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package attributemocks is a generated GoMock package.
package attributemocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Duke1616/ecmdb/internal/attribute/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateAttribute mocks base method.
func (m *MockService) CreateAttribute(ctx context.Context, req domain.Attribute) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttribute", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttribute indicates an expected call of CreateAttribute.
func (mr *MockServiceMockRecorder) CreateAttribute(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttribute", reflect.TypeOf((*MockService)(nil).CreateAttribute), ctx, req)
}

// ListAttribute mocks base method.
func (m *MockService) ListAttribute(ctx context.Context, modelUID string) ([]domain.Attribute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttribute", ctx, modelUID)
	ret0, _ := ret[0].([]domain.Attribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttribute indicates an expected call of ListAttribute.
func (mr *MockServiceMockRecorder) ListAttribute(ctx, modelUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttribute", reflect.TypeOf((*MockService)(nil).ListAttribute), ctx, modelUID)
}

// SearchAttributeFiled mocks base method.
func (m *MockService) SearchAttributeFiled(ctx context.Context, modelUid string) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAttributeFiled", ctx, modelUid)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAttributeFiled indicates an expected call of SearchAttributeFiled.
func (mr *MockServiceMockRecorder) SearchAttributeFiled(ctx, modelUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAttributeFiled", reflect.TypeOf((*MockService)(nil).SearchAttributeFiled), ctx, modelUid)
}
