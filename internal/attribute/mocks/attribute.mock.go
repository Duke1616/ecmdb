// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -source=./service.go -destination=../../mocks/attribute.mock.go -package=attributemocks -typed Service
//

// Package attributemocks is a generated GoMock package.
package attributemocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Duke1616/ecmdb/internal/attribute/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateAttribute mocks base method.
func (m *MockService) CreateAttribute(ctx context.Context, req domain.Attribute) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttribute", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttribute indicates an expected call of CreateAttribute.
func (mr *MockServiceMockRecorder) CreateAttribute(ctx, req any) *MockServiceCreateAttributeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttribute", reflect.TypeOf((*MockService)(nil).CreateAttribute), ctx, req)
	return &MockServiceCreateAttributeCall{Call: call}
}

// MockServiceCreateAttributeCall wrap *gomock.Call
type MockServiceCreateAttributeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateAttributeCall) Return(arg0 int64, arg1 error) *MockServiceCreateAttributeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateAttributeCall) Do(f func(context.Context, domain.Attribute) (int64, error)) *MockServiceCreateAttributeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateAttributeCall) DoAndReturn(f func(context.Context, domain.Attribute) (int64, error)) *MockServiceCreateAttributeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAttributes mocks base method.
func (m *MockService) ListAttributes(ctx context.Context, modelUID string) ([]domain.Attribute, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttributes", ctx, modelUID)
	ret0, _ := ret[0].([]domain.Attribute)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAttributes indicates an expected call of ListAttributes.
func (mr *MockServiceMockRecorder) ListAttributes(ctx, modelUID any) *MockServiceListAttributesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttributes", reflect.TypeOf((*MockService)(nil).ListAttributes), ctx, modelUID)
	return &MockServiceListAttributesCall{Call: call}
}

// MockServiceListAttributesCall wrap *gomock.Call
type MockServiceListAttributesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceListAttributesCall) Return(arg0 []domain.Attribute, arg1 int64, arg2 error) *MockServiceListAttributesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceListAttributesCall) Do(f func(context.Context, string) ([]domain.Attribute, int64, error)) *MockServiceListAttributesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceListAttributesCall) DoAndReturn(f func(context.Context, string) ([]domain.Attribute, int64, error)) *MockServiceListAttributesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SearchAttributeFieldsByModelUid mocks base method.
func (m *MockService) SearchAttributeFieldsByModelUid(ctx context.Context, modelUid string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAttributeFieldsByModelUid", ctx, modelUid)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAttributeFieldsByModelUid indicates an expected call of SearchAttributeFieldsByModelUid.
func (mr *MockServiceMockRecorder) SearchAttributeFieldsByModelUid(ctx, modelUid any) *MockServiceSearchAttributeFieldsByModelUidCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAttributeFieldsByModelUid", reflect.TypeOf((*MockService)(nil).SearchAttributeFieldsByModelUid), ctx, modelUid)
	return &MockServiceSearchAttributeFieldsByModelUidCall{Call: call}
}

// MockServiceSearchAttributeFieldsByModelUidCall wrap *gomock.Call
type MockServiceSearchAttributeFieldsByModelUidCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSearchAttributeFieldsByModelUidCall) Return(arg0 []string, arg1 error) *MockServiceSearchAttributeFieldsByModelUidCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSearchAttributeFieldsByModelUidCall) Do(f func(context.Context, string) ([]string, error)) *MockServiceSearchAttributeFieldsByModelUidCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSearchAttributeFieldsByModelUidCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *MockServiceSearchAttributeFieldsByModelUidCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
