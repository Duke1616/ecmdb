// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package attribute

import (
	"github.com/Duke1616/ecmdb/internal/attribute/internal/event"
	"github.com/Duke1616/ecmdb/internal/attribute/internal/repository"
	"github.com/Duke1616/ecmdb/internal/attribute/internal/repository/dao"
	"github.com/Duke1616/ecmdb/internal/attribute/internal/service"
	"github.com/Duke1616/ecmdb/internal/attribute/internal/web"
	"github.com/Duke1616/ecmdb/pkg/mongox"
	"github.com/ecodeclub/mq-api"
	"github.com/google/wire"
	"sync"
)

// Injectors from wire.go:

func InitModule(db *mongox.Mongo, q mq.MQ) (*Module, error) {
	attributeDAO := InitAttributeDAO(db)
	attributeRepository := repository.NewAttributeRepository(attributeDAO)
	attributeGroupDAO := dao.NewAttributeGroupDAO(db)
	attributeGroupRepository := repository.NewAttributeGroupRepository(attributeGroupDAO)
	fieldSecureAttrChangeEventProducer, err := event.NewFieldSecureAttrChangeEventProducer(q)
	if err != nil {
		return nil, err
	}
	service := NewService(attributeRepository, attributeGroupRepository, fieldSecureAttrChangeEventProducer)
	handler := web.NewHandler(service)
	module := &Module{
		Svc: service,
		Hdl: handler,
	}
	return module, nil
}

// wire.go:

var ProviderSet = wire.NewSet(web.NewHandler, repository.NewAttributeRepository, repository.NewAttributeGroupRepository, dao.NewAttributeGroupDAO)

var daoOnce = sync.Once{}

func InitCollectionOnce(db *mongox.Mongo) {
	daoOnce.Do(func() {
		err := dao.InitIndexes(db)
		if err != nil {
			panic(err)
		}
	})
}

func InitAttributeDAO(db *mongox.Mongo) dao.AttributeDAO {
	InitCollectionOnce(db)
	return dao.NewAttributeDAO(db)
}

func NewService(repo repository.AttributeRepository, repoGroup repository.AttributeGroupRepository,
	producer event.FieldSecureAttrChangeEventProducer) Service {
	return service.NewService(repo, repoGroup, producer)
}
