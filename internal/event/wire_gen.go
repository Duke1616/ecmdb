// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package event

import (
	engine2 "github.com/Bunny3th/easy-workflow/workflow/engine"
	"github.com/Duke1616/ecmdb/internal/engine"
	"github.com/Duke1616/ecmdb/internal/event/easyflow"
	"github.com/Duke1616/ecmdb/internal/event/producer"
	"github.com/ecodeclub/mq-api"
	"gorm.io/gorm"
	"log"
	"sync"
)

// Injectors from wire.go:

func InitModule(q mq.MQ, db *gorm.DB, engineModule *engine.Module) (*Module, error) {
	service := engineModule.Svc
	orderStatusModifyEventProducer, err := producer.NewOrderStatusModifyEventProducer(q)
	if err != nil {
		return nil, err
	}
	processEvent := InitWorkflowEngineOnce(db, service, orderStatusModifyEventProducer)
	module := &Module{
		Event: processEvent,
	}
	return module, nil
}

// wire.go:

var engineOnce = sync.Once{}

func InitWorkflowEngineOnce(db *gorm.DB, svc engine.Service, producer2 producer.OrderStatusModifyEventProducer,
) *easyflow.ProcessEvent {
	event := easyflow.NewProcessEvent(svc, producer2)
	engineOnce.Do(func() {
		engine2.DB = db
		if err := engine2.DatabaseInitialize(); err != nil {
			log.Fatalln("easy workflow 初始化数据表失败，错误:", err)
		}
		engine2.IgnoreEventError = false
	})

	return event
}
