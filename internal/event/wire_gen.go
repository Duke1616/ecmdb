// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package event

import (
	engine2 "github.com/Bunny3th/easy-workflow/workflow/engine"
	"github.com/Duke1616/ecmdb/internal/department"
	"github.com/Duke1616/ecmdb/internal/engine"
	"github.com/Duke1616/ecmdb/internal/event/domain"
	"github.com/Duke1616/ecmdb/internal/event/producer"
	"github.com/Duke1616/ecmdb/internal/event/service/channel"
	"github.com/Duke1616/ecmdb/internal/event/service/easyflow"
	"github.com/Duke1616/ecmdb/internal/event/service/provider"
	"github.com/Duke1616/ecmdb/internal/event/service/provider/feishu"
	"github.com/Duke1616/ecmdb/internal/event/service/provider/sequential"
	"github.com/Duke1616/ecmdb/internal/event/service/sender"
	"github.com/Duke1616/ecmdb/internal/event/service/strategy"
	"github.com/Duke1616/ecmdb/internal/order"
	"github.com/Duke1616/ecmdb/internal/task"
	"github.com/Duke1616/ecmdb/internal/template"
	"github.com/Duke1616/ecmdb/internal/user"
	"github.com/Duke1616/ecmdb/internal/workflow"
	"github.com/ecodeclub/mq-api"
	"github.com/google/wire"
	"github.com/larksuite/oapi-sdk-go/v3"
	"gorm.io/gorm"
	"log"
	"sync"
)

// Injectors from wire.go:

func InitModule(q mq.MQ, db *gorm.DB, engineModule *engine.Module, taskModule *task.Module, orderModule *order.Module, templateModule *template.Module, userModule *user.Module, workflowModule *workflow.Module, departmentModule *department.Module, lark2 *lark.Client) (*Module, error) {
	service := engineModule.Svc
	orderStatusModifyEventProducer, err := producer.NewOrderStatusModifyEventProducer(q)
	if err != nil {
		return nil, err
	}
	serviceService := taskModule.Svc
	service2 := orderModule.Svc
	service3 := workflowModule.Svc
	service4 := userModule.Svc
	service5 := templateModule.Svc
	selectorBuilder := newSelectorBuilder(lark2)
	channel := newChannel(selectorBuilder)
	notificationSender := sender.NewSender(channel)
	startNotification, err := strategy.NewStartNotification(service4, service5, notificationSender)
	if err != nil {
		return nil, err
	}
	fetcherResult := strategy.NewResult(serviceService)
	automationNotification, err := strategy.NewAutomationNotification(fetcherResult, service4, service5, notificationSender)
	if err != nil {
		return nil, err
	}
	service6 := departmentModule.Svc
	userNotification, err := strategy.NewUserNotification(service, service5, service2, service4, fetcherResult, service6, notificationSender)
	if err != nil {
		return nil, err
	}
	sendStrategy := strategy.NewDispatcher(startNotification, automationNotification, userNotification)
	processEvent := InitWorkflowEngineOnce(db, service, orderStatusModifyEventProducer, serviceService, service2, service3, sendStrategy)
	module := &Module{
		Event: processEvent,
	}
	return module, nil
}

// wire.go:

var InitStrategySet = wire.NewSet(strategy.NewResult, strategy.NewUserNotification, strategy.NewAutomationNotification, strategy.NewStartNotification, strategy.NewDispatcher)

var InitSender = wire.NewSet(
	newSelectorBuilder,
	newChannel, sender.NewSender,
)

var engineOnce = sync.Once{}

func InitWorkflowEngineOnce(db *gorm.DB, engineSvc engine.Service, producer2 producer.OrderStatusModifyEventProducer,
	taskSvc task.Service, orderSvc order.Service, workflowSvc workflow.Service, strategy2 strategy.SendStrategy,
) *easyflow.ProcessEvent {
	event, err := easyflow.NewProcessEvent(producer2, engineSvc, taskSvc, orderSvc, workflowSvc, strategy2)
	if err != nil {
		panic(err)
	}

	engineOnce.Do(func() {
		engine2.DB = db
		if err = engine2.DatabaseInitialize(); err != nil {
			log.Fatalln("easy workflow 初始化数据表失败，错误:", err)
		}
		engine2.IgnoreEventError = false
	})

	return event
}

func newChannel(builder *sequential.SelectorBuilder) channel.Channel {
	return channel.NewDispatcher(map[domain.Channel]channel.Channel{domain.ChannelFeishuCard: channel.NewFeishuCardChannel(builder)})
}

func newSelectorBuilder(lark2 *lark.Client,
) *sequential.SelectorBuilder {

	providers := make([]provider.Provider, 0)

	cardProvider, err := feishu.NewFeishuCardProvider(lark2)
	if err != nil {
		return nil
	}

	providers = append(providers, cardProvider)
	return sequential.NewSelectorBuilder(providers)
}
