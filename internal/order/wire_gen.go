// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package order

import (
	"context"
	"github.com/Duke1616/ecmdb/internal/order/internal/event"
	"github.com/Duke1616/ecmdb/internal/order/internal/repository"
	"github.com/Duke1616/ecmdb/internal/order/internal/repository/dao"
	"github.com/Duke1616/ecmdb/internal/order/internal/service"
	"github.com/Duke1616/ecmdb/internal/order/internal/web"
	"github.com/Duke1616/ecmdb/pkg/mongox"
	"github.com/ecodeclub/mq-api"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitModule(q mq.MQ, db *mongox.Mongo) (*Module, error) {
	orderDAO := dao.NewOrderDAO(db)
	orderRepository := repository.NewOrderRepository(orderDAO)
	createFlowEventProducer, err := event.NewCreateFlowEventProducer(q)
	if err != nil {
		return nil, err
	}
	serviceService := service.NewService(orderRepository, createFlowEventProducer)
	handler := web.NewHandler(serviceService)
	wechatOrderConsumer := initConsumer(serviceService, q)
	module := &Module{
		Hdl: handler,
		Svc: serviceService,
		c:   wechatOrderConsumer,
	}
	return module, nil
}

// wire.go:

var ProviderSet = wire.NewSet(web.NewHandler, service.NewService, repository.NewOrderRepository, dao.NewOrderDAO)

func initConsumer(svc service.Service, q mq.MQ) *event.WechatOrderConsumer {
	consumer, err := event.NewWechatOrderConsumer(svc, q)
	if err != nil {
		panic(err)
	}

	consumer.Start(context.Background())
	return consumer
}
