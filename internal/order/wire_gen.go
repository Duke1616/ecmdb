// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package order

import (
	"context"
	"github.com/Duke1616/ecmdb/internal/engine"
	"github.com/Duke1616/ecmdb/internal/order/internal/event"
	"github.com/Duke1616/ecmdb/internal/order/internal/event/consumer"
	"github.com/Duke1616/ecmdb/internal/order/internal/repository"
	"github.com/Duke1616/ecmdb/internal/order/internal/repository/dao"
	"github.com/Duke1616/ecmdb/internal/order/internal/service"
	"github.com/Duke1616/ecmdb/internal/order/internal/web"
	"github.com/Duke1616/ecmdb/internal/template"
	"github.com/Duke1616/ecmdb/internal/workflow"
	"github.com/Duke1616/ecmdb/pkg/mongox"
	"github.com/ecodeclub/mq-api"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitModule(q mq.MQ, db *mongox.Mongo, workflowModule *workflow.Module, engineModule *engine.Module, templateModule *template.Module) (*Module, error) {
	orderDAO := dao.NewOrderDAO(db)
	orderRepository := repository.NewOrderRepository(orderDAO)
	createProcessEventProducer, err := event.NewCreateProcessEventProducer(q)
	if err != nil {
		return nil, err
	}
	serviceService := service.NewService(orderRepository, createProcessEventProducer)
	service2 := engineModule.Svc
	handler := web.NewHandler(serviceService, service2)
	service3 := templateModule.Svc
	wechatOrderConsumer := initWechatConsumer(serviceService, service3, q)
	service4 := workflowModule.Svc
	processEventConsumer := InitProcessConsumer(q, service4, serviceService)
	orderStatusModifyEventConsumer := InitModifyStatusConsumer(q, serviceService)
	feishuCallbackEventConsumer := InitFeishuCallbackConsumer(q, service2)
	module := &Module{
		Hdl: handler,
		Svc: serviceService,
		cw:  wechatOrderConsumer,
		cs:  processEventConsumer,
		cms: orderStatusModifyEventConsumer,
		cf:  feishuCallbackEventConsumer,
	}
	return module, nil
}

// wire.go:

var ProviderSet = wire.NewSet(web.NewHandler, service.NewService, repository.NewOrderRepository, dao.NewOrderDAO)

func initWechatConsumer(svc service.Service, templateSvc template.Service, q mq.MQ) *consumer.WechatOrderConsumer {
	c, err := consumer.NewWechatOrderConsumer(svc, templateSvc, q)
	if err != nil {
		panic(err)
	}

	c.Start(context.Background())
	return c
}

func InitProcessConsumer(q mq.MQ, workflowSvc workflow.Service, svc service.Service) *consumer.ProcessEventConsumer {
	c, err := consumer.NewProcessEventConsumer(q, workflowSvc, svc)
	if err != nil {
		return nil
	}

	c.Start(context.Background())
	return c
}

func InitModifyStatusConsumer(q mq.MQ, svc service.Service) *consumer.OrderStatusModifyEventConsumer {
	c, err := consumer.NewOrderStatusModifyEventConsumer(q, svc)
	if err != nil {
		return nil
	}

	c.Start(context.Background())
	return c
}

func InitFeishuCallbackConsumer(q mq.MQ, svc engine.Service) *consumer.FeishuCallbackEventConsumer {
	c, err := consumer.NewFeishuCallbackEventConsumer(q, svc)
	if err != nil {
		return nil
	}

	c.Start(context.Background())
	return c
}
