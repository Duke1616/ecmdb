// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package permission

import (
	"context"
	"github.com/Duke1616/ecmdb/internal/menu"
	"github.com/Duke1616/ecmdb/internal/permission/internal/event"
	"github.com/Duke1616/ecmdb/internal/permission/internal/service"
	"github.com/Duke1616/ecmdb/internal/permission/internal/web"
	"github.com/Duke1616/ecmdb/internal/policy"
	"github.com/Duke1616/ecmdb/internal/role"
	"github.com/Duke1616/ecmdb/pkg/mongox"
	"github.com/ecodeclub/mq-api"
)

// Injectors from wire.go:

func InitModule(db *mongox.Mongo, q mq.MQ, roleModule *role.Module, menuModule *menu.Module, policyModule *policy.Module) (*Module, error) {
	serviceService := roleModule.Svc
	service2 := menuModule.Svc
	service3 := policyModule.Svc
	service4 := service.NewService(serviceService, service3, service2)
	handler := web.NewHandler(serviceService, service2, service3, service4)
	menuChangeEventConsumer := InitMenuChangeEventConsumer(q, service4)
	module := &Module{
		Hdl: handler,
		Svc: service4,
		c:   menuChangeEventConsumer,
	}
	return module, nil
}

// wire.go:

func InitMenuChangeEventConsumer(q mq.MQ, svc service.Service) *event.MenuChangeEventConsumer {
	c, err := event.NewMenuChangeEventConsumer(q, svc)
	if err != nil {
		return nil
	}

	c.Start(context.Background())
	return c
}
