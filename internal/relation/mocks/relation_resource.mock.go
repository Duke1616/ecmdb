// Code generated by MockGen. DO NOT EDIT.
// Source: ./relation_resource.go
//
// Generated by this command:
//
//	mockgen -source=./relation_resource.go -destination=../../mocks/relation_resource.mock.go -package=relationmocks -typed RelationResourceService
//

// Package relationmocks is a generated GoMock package.
package relationmocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Duke1616/ecmdb/internal/relation/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockRelationResourceService is a mock of RelationResourceService interface.
type MockRelationResourceService struct {
	ctrl     *gomock.Controller
	recorder *MockRelationResourceServiceMockRecorder
	isgomock struct{}
}

// MockRelationResourceServiceMockRecorder is the mock recorder for MockRelationResourceService.
type MockRelationResourceServiceMockRecorder struct {
	mock *MockRelationResourceService
}

// NewMockRelationResourceService creates a new mock instance.
func NewMockRelationResourceService(ctrl *gomock.Controller) *MockRelationResourceService {
	mock := &MockRelationResourceService{ctrl: ctrl}
	mock.recorder = &MockRelationResourceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationResourceService) EXPECT() *MockRelationResourceServiceMockRecorder {
	return m.recorder
}

// CreateResourceRelation mocks base method.
func (m *MockRelationResourceService) CreateResourceRelation(ctx context.Context, req domain.ResourceRelation) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourceRelation", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourceRelation indicates an expected call of CreateResourceRelation.
func (mr *MockRelationResourceServiceMockRecorder) CreateResourceRelation(ctx, req any) *MockRelationResourceServiceCreateResourceRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceRelation", reflect.TypeOf((*MockRelationResourceService)(nil).CreateResourceRelation), ctx, req)
	return &MockRelationResourceServiceCreateResourceRelationCall{Call: call}
}

// MockRelationResourceServiceCreateResourceRelationCall wrap *gomock.Call
type MockRelationResourceServiceCreateResourceRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationResourceServiceCreateResourceRelationCall) Return(arg0 int64, arg1 error) *MockRelationResourceServiceCreateResourceRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationResourceServiceCreateResourceRelationCall) Do(f func(context.Context, domain.ResourceRelation) (int64, error)) *MockRelationResourceServiceCreateResourceRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationResourceServiceCreateResourceRelationCall) DoAndReturn(f func(context.Context, domain.ResourceRelation) (int64, error)) *MockRelationResourceServiceCreateResourceRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteDstRelation mocks base method.
func (m *MockRelationResourceService) DeleteDstRelation(ctx context.Context, resourceId int64, modelUid, relationName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDstRelation", ctx, resourceId, modelUid, relationName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDstRelation indicates an expected call of DeleteDstRelation.
func (mr *MockRelationResourceServiceMockRecorder) DeleteDstRelation(ctx, resourceId, modelUid, relationName any) *MockRelationResourceServiceDeleteDstRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDstRelation", reflect.TypeOf((*MockRelationResourceService)(nil).DeleteDstRelation), ctx, resourceId, modelUid, relationName)
	return &MockRelationResourceServiceDeleteDstRelationCall{Call: call}
}

// MockRelationResourceServiceDeleteDstRelationCall wrap *gomock.Call
type MockRelationResourceServiceDeleteDstRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationResourceServiceDeleteDstRelationCall) Return(arg0 int64, arg1 error) *MockRelationResourceServiceDeleteDstRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationResourceServiceDeleteDstRelationCall) Do(f func(context.Context, int64, string, string) (int64, error)) *MockRelationResourceServiceDeleteDstRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationResourceServiceDeleteDstRelationCall) DoAndReturn(f func(context.Context, int64, string, string) (int64, error)) *MockRelationResourceServiceDeleteDstRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteResourceRelation mocks base method.
func (m *MockRelationResourceService) DeleteResourceRelation(ctx context.Context, id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceRelation", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourceRelation indicates an expected call of DeleteResourceRelation.
func (mr *MockRelationResourceServiceMockRecorder) DeleteResourceRelation(ctx, id any) *MockRelationResourceServiceDeleteResourceRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceRelation", reflect.TypeOf((*MockRelationResourceService)(nil).DeleteResourceRelation), ctx, id)
	return &MockRelationResourceServiceDeleteResourceRelationCall{Call: call}
}

// MockRelationResourceServiceDeleteResourceRelationCall wrap *gomock.Call
type MockRelationResourceServiceDeleteResourceRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationResourceServiceDeleteResourceRelationCall) Return(arg0 int64, arg1 error) *MockRelationResourceServiceDeleteResourceRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationResourceServiceDeleteResourceRelationCall) Do(f func(context.Context, int64) (int64, error)) *MockRelationResourceServiceDeleteResourceRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationResourceServiceDeleteResourceRelationCall) DoAndReturn(f func(context.Context, int64) (int64, error)) *MockRelationResourceServiceDeleteResourceRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteSrcRelation mocks base method.
func (m *MockRelationResourceService) DeleteSrcRelation(ctx context.Context, resourceId int64, modelUid, relationName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSrcRelation", ctx, resourceId, modelUid, relationName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSrcRelation indicates an expected call of DeleteSrcRelation.
func (mr *MockRelationResourceServiceMockRecorder) DeleteSrcRelation(ctx, resourceId, modelUid, relationName any) *MockRelationResourceServiceDeleteSrcRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSrcRelation", reflect.TypeOf((*MockRelationResourceService)(nil).DeleteSrcRelation), ctx, resourceId, modelUid, relationName)
	return &MockRelationResourceServiceDeleteSrcRelationCall{Call: call}
}

// MockRelationResourceServiceDeleteSrcRelationCall wrap *gomock.Call
type MockRelationResourceServiceDeleteSrcRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationResourceServiceDeleteSrcRelationCall) Return(arg0 int64, arg1 error) *MockRelationResourceServiceDeleteSrcRelationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationResourceServiceDeleteSrcRelationCall) Do(f func(context.Context, int64, string, string) (int64, error)) *MockRelationResourceServiceDeleteSrcRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationResourceServiceDeleteSrcRelationCall) DoAndReturn(f func(context.Context, int64, string, string) (int64, error)) *MockRelationResourceServiceDeleteSrcRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListDiagram mocks base method.
func (m *MockRelationResourceService) ListDiagram(ctx context.Context, modelUid string, id int64) (domain.ResourceDiagram, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDiagram", ctx, modelUid, id)
	ret0, _ := ret[0].(domain.ResourceDiagram)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDiagram indicates an expected call of ListDiagram.
func (mr *MockRelationResourceServiceMockRecorder) ListDiagram(ctx, modelUid, id any) *MockRelationResourceServiceListDiagramCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiagram", reflect.TypeOf((*MockRelationResourceService)(nil).ListDiagram), ctx, modelUid, id)
	return &MockRelationResourceServiceListDiagramCall{Call: call}
}

// MockRelationResourceServiceListDiagramCall wrap *gomock.Call
type MockRelationResourceServiceListDiagramCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationResourceServiceListDiagramCall) Return(arg0 domain.ResourceDiagram, arg1 int64, arg2 error) *MockRelationResourceServiceListDiagramCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationResourceServiceListDiagramCall) Do(f func(context.Context, string, int64) (domain.ResourceDiagram, int64, error)) *MockRelationResourceServiceListDiagramCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationResourceServiceListDiagramCall) DoAndReturn(f func(context.Context, string, int64) (domain.ResourceDiagram, int64, error)) *MockRelationResourceServiceListDiagramCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListDstAggregated mocks base method.
func (m *MockRelationResourceService) ListDstAggregated(ctx context.Context, modelUid string, id int64) ([]domain.ResourceAggregatedAssets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDstAggregated", ctx, modelUid, id)
	ret0, _ := ret[0].([]domain.ResourceAggregatedAssets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDstAggregated indicates an expected call of ListDstAggregated.
func (mr *MockRelationResourceServiceMockRecorder) ListDstAggregated(ctx, modelUid, id any) *MockRelationResourceServiceListDstAggregatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDstAggregated", reflect.TypeOf((*MockRelationResourceService)(nil).ListDstAggregated), ctx, modelUid, id)
	return &MockRelationResourceServiceListDstAggregatedCall{Call: call}
}

// MockRelationResourceServiceListDstAggregatedCall wrap *gomock.Call
type MockRelationResourceServiceListDstAggregatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationResourceServiceListDstAggregatedCall) Return(arg0 []domain.ResourceAggregatedAssets, arg1 error) *MockRelationResourceServiceListDstAggregatedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationResourceServiceListDstAggregatedCall) Do(f func(context.Context, string, int64) ([]domain.ResourceAggregatedAssets, error)) *MockRelationResourceServiceListDstAggregatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationResourceServiceListDstAggregatedCall) DoAndReturn(f func(context.Context, string, int64) ([]domain.ResourceAggregatedAssets, error)) *MockRelationResourceServiceListDstAggregatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListDstRelated mocks base method.
func (m *MockRelationResourceService) ListDstRelated(ctx context.Context, modelUid, relationName string, id int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDstRelated", ctx, modelUid, relationName, id)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDstRelated indicates an expected call of ListDstRelated.
func (mr *MockRelationResourceServiceMockRecorder) ListDstRelated(ctx, modelUid, relationName, id any) *MockRelationResourceServiceListDstRelatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDstRelated", reflect.TypeOf((*MockRelationResourceService)(nil).ListDstRelated), ctx, modelUid, relationName, id)
	return &MockRelationResourceServiceListDstRelatedCall{Call: call}
}

// MockRelationResourceServiceListDstRelatedCall wrap *gomock.Call
type MockRelationResourceServiceListDstRelatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationResourceServiceListDstRelatedCall) Return(arg0 []int64, arg1 error) *MockRelationResourceServiceListDstRelatedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationResourceServiceListDstRelatedCall) Do(f func(context.Context, string, string, int64) ([]int64, error)) *MockRelationResourceServiceListDstRelatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationResourceServiceListDstRelatedCall) DoAndReturn(f func(context.Context, string, string, int64) ([]int64, error)) *MockRelationResourceServiceListDstRelatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListDstResources mocks base method.
func (m *MockRelationResourceService) ListDstResources(ctx context.Context, modelUid string, id int64) ([]domain.ResourceRelation, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDstResources", ctx, modelUid, id)
	ret0, _ := ret[0].([]domain.ResourceRelation)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDstResources indicates an expected call of ListDstResources.
func (mr *MockRelationResourceServiceMockRecorder) ListDstResources(ctx, modelUid, id any) *MockRelationResourceServiceListDstResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDstResources", reflect.TypeOf((*MockRelationResourceService)(nil).ListDstResources), ctx, modelUid, id)
	return &MockRelationResourceServiceListDstResourcesCall{Call: call}
}

// MockRelationResourceServiceListDstResourcesCall wrap *gomock.Call
type MockRelationResourceServiceListDstResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationResourceServiceListDstResourcesCall) Return(arg0 []domain.ResourceRelation, arg1 int64, arg2 error) *MockRelationResourceServiceListDstResourcesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationResourceServiceListDstResourcesCall) Do(f func(context.Context, string, int64) ([]domain.ResourceRelation, int64, error)) *MockRelationResourceServiceListDstResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationResourceServiceListDstResourcesCall) DoAndReturn(f func(context.Context, string, int64) ([]domain.ResourceRelation, int64, error)) *MockRelationResourceServiceListDstResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSrcAggregated mocks base method.
func (m *MockRelationResourceService) ListSrcAggregated(ctx context.Context, modelUid string, id int64) ([]domain.ResourceAggregatedAssets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSrcAggregated", ctx, modelUid, id)
	ret0, _ := ret[0].([]domain.ResourceAggregatedAssets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSrcAggregated indicates an expected call of ListSrcAggregated.
func (mr *MockRelationResourceServiceMockRecorder) ListSrcAggregated(ctx, modelUid, id any) *MockRelationResourceServiceListSrcAggregatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSrcAggregated", reflect.TypeOf((*MockRelationResourceService)(nil).ListSrcAggregated), ctx, modelUid, id)
	return &MockRelationResourceServiceListSrcAggregatedCall{Call: call}
}

// MockRelationResourceServiceListSrcAggregatedCall wrap *gomock.Call
type MockRelationResourceServiceListSrcAggregatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationResourceServiceListSrcAggregatedCall) Return(arg0 []domain.ResourceAggregatedAssets, arg1 error) *MockRelationResourceServiceListSrcAggregatedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationResourceServiceListSrcAggregatedCall) Do(f func(context.Context, string, int64) ([]domain.ResourceAggregatedAssets, error)) *MockRelationResourceServiceListSrcAggregatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationResourceServiceListSrcAggregatedCall) DoAndReturn(f func(context.Context, string, int64) ([]domain.ResourceAggregatedAssets, error)) *MockRelationResourceServiceListSrcAggregatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSrcRelated mocks base method.
func (m *MockRelationResourceService) ListSrcRelated(ctx context.Context, modelUid, relationName string, id int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSrcRelated", ctx, modelUid, relationName, id)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSrcRelated indicates an expected call of ListSrcRelated.
func (mr *MockRelationResourceServiceMockRecorder) ListSrcRelated(ctx, modelUid, relationName, id any) *MockRelationResourceServiceListSrcRelatedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSrcRelated", reflect.TypeOf((*MockRelationResourceService)(nil).ListSrcRelated), ctx, modelUid, relationName, id)
	return &MockRelationResourceServiceListSrcRelatedCall{Call: call}
}

// MockRelationResourceServiceListSrcRelatedCall wrap *gomock.Call
type MockRelationResourceServiceListSrcRelatedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationResourceServiceListSrcRelatedCall) Return(arg0 []int64, arg1 error) *MockRelationResourceServiceListSrcRelatedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationResourceServiceListSrcRelatedCall) Do(f func(context.Context, string, string, int64) ([]int64, error)) *MockRelationResourceServiceListSrcRelatedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationResourceServiceListSrcRelatedCall) DoAndReturn(f func(context.Context, string, string, int64) ([]int64, error)) *MockRelationResourceServiceListSrcRelatedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSrcResources mocks base method.
func (m *MockRelationResourceService) ListSrcResources(ctx context.Context, modelUid string, id int64) ([]domain.ResourceRelation, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSrcResources", ctx, modelUid, id)
	ret0, _ := ret[0].([]domain.ResourceRelation)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSrcResources indicates an expected call of ListSrcResources.
func (mr *MockRelationResourceServiceMockRecorder) ListSrcResources(ctx, modelUid, id any) *MockRelationResourceServiceListSrcResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSrcResources", reflect.TypeOf((*MockRelationResourceService)(nil).ListSrcResources), ctx, modelUid, id)
	return &MockRelationResourceServiceListSrcResourcesCall{Call: call}
}

// MockRelationResourceServiceListSrcResourcesCall wrap *gomock.Call
type MockRelationResourceServiceListSrcResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationResourceServiceListSrcResourcesCall) Return(arg0 []domain.ResourceRelation, arg1 int64, arg2 error) *MockRelationResourceServiceListSrcResourcesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationResourceServiceListSrcResourcesCall) Do(f func(context.Context, string, int64) ([]domain.ResourceRelation, int64, error)) *MockRelationResourceServiceListSrcResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationResourceServiceListSrcResourcesCall) DoAndReturn(f func(context.Context, string, int64) ([]domain.ResourceRelation, int64, error)) *MockRelationResourceServiceListSrcResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
