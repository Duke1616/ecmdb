// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package relation

import (
	"github.com/Duke1616/ecmdb/internal/relation/internal/repository"
	"github.com/Duke1616/ecmdb/internal/relation/internal/repository/dao"
	"github.com/Duke1616/ecmdb/internal/relation/internal/service"
	"github.com/Duke1616/ecmdb/internal/relation/internal/web"
	"github.com/Duke1616/ecmdb/pkg/mongox"
	"github.com/google/wire"
	"sync"
)

// Injectors from wire.go:

func InitModule(db *mongox.Mongo) (*Module, error) {
	relationResourceService := InitRRService(db)
	relationModelService := InitRMService(db)
	relationTypeDAO := dao.NewRelationTypeDAO(db)
	relationTypeRepository := repository.NewRelationTypeRepository(relationTypeDAO)
	relationTypeService := service.NewRelationTypeService(relationTypeRepository)
	relationResourceHandler := web.NewRelationResourceHandler(relationResourceService)
	relationModelHandler := web.NewRelationModelHandler(relationModelService)
	relationTypeHandler := web.NewRelationTypeHandler(relationTypeService)
	module := &Module{
		RRSvc: relationResourceService,
		RMSvc: relationModelService,
		RTSvc: relationTypeService,
		RRHdl: relationResourceHandler,
		RMHdl: relationModelHandler,
		RTHdl: relationTypeHandler,
	}
	return module, nil
}

func InitRMService(db *mongox.Mongo) service.RelationModelService {
	relationModelDAO := initRmDAO(db)
	relationModelRepository := repository.NewRelationModelRepository(relationModelDAO)
	relationModelService := service.NewRelationModelService(relationModelRepository)
	return relationModelService
}

func InitRRService(db *mongox.Mongo) service.RelationResourceService {
	relationResourceDAO := intRrDAO(db)
	relationResourceRepository := repository.NewRelationResourceRepository(relationResourceDAO)
	relationResourceService := service.NewRelationResourceService(relationResourceRepository)
	return relationResourceService
}

// wire.go:

var ProviderSet = wire.NewSet(web.NewRelationResourceHandler, web.NewRelationModelHandler, web.NewRelationTypeHandler, service.NewRelationTypeService, repository.NewRelationTypeRepository, dao.NewRelationTypeDAO)

var (
	rmDaoOnce = sync.Once{}
	rrDaoOnce = sync.Once{}
	rmd       dao.RelationModelDAO
	rrd       dao.RelationResourceDAO
)

func initRmDAO(db *mongox.Mongo) dao.RelationModelDAO {
	rmDaoOnce.Do(func() {
		rmd = dao.NewRelationModelDAO(db)
	})
	return rmd
}

func intRrDAO(db *mongox.Mongo) dao.RelationResourceDAO {
	rrDaoOnce.Do(func() {
		rrd = dao.NewRelationResourceDAO(db)
	})
	return rrd
}
