// Code generated by MockGen. DO NOT EDIT.
// Source: ./encrypted.go
//
// Generated by this command:
//
//	mockgen -source=./encrypted.go -destination=../../mocks/encrypted.mock.go -package=resourcemocks -typed EncryptedSvc
//

// Package resourcemocks is a generated GoMock package.
package resourcemocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Duke1616/ecmdb/internal/resource/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockEncryptedSvc is a mock of EncryptedSvc interface.
type MockEncryptedSvc struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptedSvcMockRecorder
	isgomock struct{}
}

// MockEncryptedSvcMockRecorder is the mock recorder for MockEncryptedSvc.
type MockEncryptedSvcMockRecorder struct {
	mock *MockEncryptedSvc
}

// NewMockEncryptedSvc creates a new mock instance.
func NewMockEncryptedSvc(ctrl *gomock.Controller) *MockEncryptedSvc {
	mock := &MockEncryptedSvc{ctrl: ctrl}
	mock.recorder = &MockEncryptedSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptedSvc) EXPECT() *MockEncryptedSvcMockRecorder {
	return m.recorder
}

// BatchUpdateResources mocks base method.
func (m *MockEncryptedSvc) BatchUpdateResources(ctx context.Context, resources []domain.Resource) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateResources", ctx, resources)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateResources indicates an expected call of BatchUpdateResources.
func (mr *MockEncryptedSvcMockRecorder) BatchUpdateResources(ctx, resources any) *MockEncryptedSvcBatchUpdateResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateResources", reflect.TypeOf((*MockEncryptedSvc)(nil).BatchUpdateResources), ctx, resources)
	return &MockEncryptedSvcBatchUpdateResourcesCall{Call: call}
}

// MockEncryptedSvcBatchUpdateResourcesCall wrap *gomock.Call
type MockEncryptedSvcBatchUpdateResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEncryptedSvcBatchUpdateResourcesCall) Return(arg0 int64, arg1 error) *MockEncryptedSvcBatchUpdateResourcesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEncryptedSvcBatchUpdateResourcesCall) Do(f func(context.Context, []domain.Resource) (int64, error)) *MockEncryptedSvcBatchUpdateResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEncryptedSvcBatchUpdateResourcesCall) DoAndReturn(f func(context.Context, []domain.Resource) (int64, error)) *MockEncryptedSvcBatchUpdateResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CountByModelUid mocks base method.
func (m *MockEncryptedSvc) CountByModelUid(ctx context.Context, modelUid string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByModelUid", ctx, modelUid)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByModelUid indicates an expected call of CountByModelUid.
func (mr *MockEncryptedSvcMockRecorder) CountByModelUid(ctx, modelUid any) *MockEncryptedSvcCountByModelUidCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByModelUid", reflect.TypeOf((*MockEncryptedSvc)(nil).CountByModelUid), ctx, modelUid)
	return &MockEncryptedSvcCountByModelUidCall{Call: call}
}

// MockEncryptedSvcCountByModelUidCall wrap *gomock.Call
type MockEncryptedSvcCountByModelUidCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEncryptedSvcCountByModelUidCall) Return(arg0 int64, arg1 error) *MockEncryptedSvcCountByModelUidCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEncryptedSvcCountByModelUidCall) Do(f func(context.Context, string) (int64, error)) *MockEncryptedSvcCountByModelUidCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEncryptedSvcCountByModelUidCall) DoAndReturn(f func(context.Context, string) (int64, error)) *MockEncryptedSvcCountByModelUidCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CountByModelUids mocks base method.
func (m *MockEncryptedSvc) CountByModelUids(ctx context.Context, modelUids []string) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByModelUids", ctx, modelUids)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByModelUids indicates an expected call of CountByModelUids.
func (mr *MockEncryptedSvcMockRecorder) CountByModelUids(ctx, modelUids any) *MockEncryptedSvcCountByModelUidsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByModelUids", reflect.TypeOf((*MockEncryptedSvc)(nil).CountByModelUids), ctx, modelUids)
	return &MockEncryptedSvcCountByModelUidsCall{Call: call}
}

// MockEncryptedSvcCountByModelUidsCall wrap *gomock.Call
type MockEncryptedSvcCountByModelUidsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEncryptedSvcCountByModelUidsCall) Return(arg0 map[string]int, arg1 error) *MockEncryptedSvcCountByModelUidsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEncryptedSvcCountByModelUidsCall) Do(f func(context.Context, []string) (map[string]int, error)) *MockEncryptedSvcCountByModelUidsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEncryptedSvcCountByModelUidsCall) DoAndReturn(f func(context.Context, []string) (map[string]int, error)) *MockEncryptedSvcCountByModelUidsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateResource mocks base method.
func (m *MockEncryptedSvc) CreateResource(ctx context.Context, req domain.Resource) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResource", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResource indicates an expected call of CreateResource.
func (mr *MockEncryptedSvcMockRecorder) CreateResource(ctx, req any) *MockEncryptedSvcCreateResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResource", reflect.TypeOf((*MockEncryptedSvc)(nil).CreateResource), ctx, req)
	return &MockEncryptedSvcCreateResourceCall{Call: call}
}

// MockEncryptedSvcCreateResourceCall wrap *gomock.Call
type MockEncryptedSvcCreateResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEncryptedSvcCreateResourceCall) Return(arg0 int64, arg1 error) *MockEncryptedSvcCreateResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEncryptedSvcCreateResourceCall) Do(f func(context.Context, domain.Resource) (int64, error)) *MockEncryptedSvcCreateResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEncryptedSvcCreateResourceCall) DoAndReturn(f func(context.Context, domain.Resource) (int64, error)) *MockEncryptedSvcCreateResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteResource mocks base method.
func (m *MockEncryptedSvc) DeleteResource(ctx context.Context, id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockEncryptedSvcMockRecorder) DeleteResource(ctx, id any) *MockEncryptedSvcDeleteResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockEncryptedSvc)(nil).DeleteResource), ctx, id)
	return &MockEncryptedSvcDeleteResourceCall{Call: call}
}

// MockEncryptedSvcDeleteResourceCall wrap *gomock.Call
type MockEncryptedSvcDeleteResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEncryptedSvcDeleteResourceCall) Return(arg0 int64, arg1 error) *MockEncryptedSvcDeleteResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEncryptedSvcDeleteResourceCall) Do(f func(context.Context, int64) (int64, error)) *MockEncryptedSvcDeleteResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEncryptedSvcDeleteResourceCall) DoAndReturn(f func(context.Context, int64) (int64, error)) *MockEncryptedSvcDeleteResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindResourceById mocks base method.
func (m *MockEncryptedSvc) FindResourceById(ctx context.Context, fields []string, id int64) (domain.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindResourceById", ctx, fields, id)
	ret0, _ := ret[0].(domain.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindResourceById indicates an expected call of FindResourceById.
func (mr *MockEncryptedSvcMockRecorder) FindResourceById(ctx, fields, id any) *MockEncryptedSvcFindResourceByIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindResourceById", reflect.TypeOf((*MockEncryptedSvc)(nil).FindResourceById), ctx, fields, id)
	return &MockEncryptedSvcFindResourceByIdCall{Call: call}
}

// MockEncryptedSvcFindResourceByIdCall wrap *gomock.Call
type MockEncryptedSvcFindResourceByIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEncryptedSvcFindResourceByIdCall) Return(arg0 domain.Resource, arg1 error) *MockEncryptedSvcFindResourceByIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEncryptedSvcFindResourceByIdCall) Do(f func(context.Context, []string, int64) (domain.Resource, error)) *MockEncryptedSvcFindResourceByIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEncryptedSvcFindResourceByIdCall) DoAndReturn(f func(context.Context, []string, int64) (domain.Resource, error)) *MockEncryptedSvcFindResourceByIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindSecureData mocks base method.
func (m *MockEncryptedSvc) FindSecureData(ctx context.Context, id int64, fieldUid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSecureData", ctx, id, fieldUid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSecureData indicates an expected call of FindSecureData.
func (mr *MockEncryptedSvcMockRecorder) FindSecureData(ctx, id, fieldUid any) *MockEncryptedSvcFindSecureDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSecureData", reflect.TypeOf((*MockEncryptedSvc)(nil).FindSecureData), ctx, id, fieldUid)
	return &MockEncryptedSvcFindSecureDataCall{Call: call}
}

// MockEncryptedSvcFindSecureDataCall wrap *gomock.Call
type MockEncryptedSvcFindSecureDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEncryptedSvcFindSecureDataCall) Return(arg0 string, arg1 error) *MockEncryptedSvcFindSecureDataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEncryptedSvcFindSecureDataCall) Do(f func(context.Context, int64, string) (string, error)) *MockEncryptedSvcFindSecureDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEncryptedSvcFindSecureDataCall) DoAndReturn(f func(context.Context, int64, string) (string, error)) *MockEncryptedSvcFindSecureDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAndDecryptBeforeUtime mocks base method.
func (m *MockEncryptedSvc) ListAndDecryptBeforeUtime(ctx context.Context, utime int64, fields []string, modelUid string, offset, limit int64) ([]domain.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAndDecryptBeforeUtime", ctx, utime, fields, modelUid, offset, limit)
	ret0, _ := ret[0].([]domain.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAndDecryptBeforeUtime indicates an expected call of ListAndDecryptBeforeUtime.
func (mr *MockEncryptedSvcMockRecorder) ListAndDecryptBeforeUtime(ctx, utime, fields, modelUid, offset, limit any) *MockEncryptedSvcListAndDecryptBeforeUtimeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAndDecryptBeforeUtime", reflect.TypeOf((*MockEncryptedSvc)(nil).ListAndDecryptBeforeUtime), ctx, utime, fields, modelUid, offset, limit)
	return &MockEncryptedSvcListAndDecryptBeforeUtimeCall{Call: call}
}

// MockEncryptedSvcListAndDecryptBeforeUtimeCall wrap *gomock.Call
type MockEncryptedSvcListAndDecryptBeforeUtimeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEncryptedSvcListAndDecryptBeforeUtimeCall) Return(arg0 []domain.Resource, arg1 error) *MockEncryptedSvcListAndDecryptBeforeUtimeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEncryptedSvcListAndDecryptBeforeUtimeCall) Do(f func(context.Context, int64, []string, string, int64, int64) ([]domain.Resource, error)) *MockEncryptedSvcListAndDecryptBeforeUtimeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEncryptedSvcListAndDecryptBeforeUtimeCall) DoAndReturn(f func(context.Context, int64, []string, string, int64, int64) ([]domain.Resource, error)) *MockEncryptedSvcListAndDecryptBeforeUtimeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListBeforeUtime mocks base method.
func (m *MockEncryptedSvc) ListBeforeUtime(ctx context.Context, utime int64, fields []string, modelUid string, offset, limit int64) ([]domain.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBeforeUtime", ctx, utime, fields, modelUid, offset, limit)
	ret0, _ := ret[0].([]domain.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBeforeUtime indicates an expected call of ListBeforeUtime.
func (mr *MockEncryptedSvcMockRecorder) ListBeforeUtime(ctx, utime, fields, modelUid, offset, limit any) *MockEncryptedSvcListBeforeUtimeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBeforeUtime", reflect.TypeOf((*MockEncryptedSvc)(nil).ListBeforeUtime), ctx, utime, fields, modelUid, offset, limit)
	return &MockEncryptedSvcListBeforeUtimeCall{Call: call}
}

// MockEncryptedSvcListBeforeUtimeCall wrap *gomock.Call
type MockEncryptedSvcListBeforeUtimeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEncryptedSvcListBeforeUtimeCall) Return(arg0 []domain.Resource, arg1 error) *MockEncryptedSvcListBeforeUtimeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEncryptedSvcListBeforeUtimeCall) Do(f func(context.Context, int64, []string, string, int64, int64) ([]domain.Resource, error)) *MockEncryptedSvcListBeforeUtimeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEncryptedSvcListBeforeUtimeCall) DoAndReturn(f func(context.Context, int64, []string, string, int64, int64) ([]domain.Resource, error)) *MockEncryptedSvcListBeforeUtimeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListExcludeAndFilterResourceByIds mocks base method.
func (m *MockEncryptedSvc) ListExcludeAndFilterResourceByIds(ctx context.Context, fields []string, modelUid string, offset, limit int64, ids []int64, filter domain.Condition) ([]domain.Resource, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExcludeAndFilterResourceByIds", ctx, fields, modelUid, offset, limit, ids, filter)
	ret0, _ := ret[0].([]domain.Resource)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListExcludeAndFilterResourceByIds indicates an expected call of ListExcludeAndFilterResourceByIds.
func (mr *MockEncryptedSvcMockRecorder) ListExcludeAndFilterResourceByIds(ctx, fields, modelUid, offset, limit, ids, filter any) *MockEncryptedSvcListExcludeAndFilterResourceByIdsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExcludeAndFilterResourceByIds", reflect.TypeOf((*MockEncryptedSvc)(nil).ListExcludeAndFilterResourceByIds), ctx, fields, modelUid, offset, limit, ids, filter)
	return &MockEncryptedSvcListExcludeAndFilterResourceByIdsCall{Call: call}
}

// MockEncryptedSvcListExcludeAndFilterResourceByIdsCall wrap *gomock.Call
type MockEncryptedSvcListExcludeAndFilterResourceByIdsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEncryptedSvcListExcludeAndFilterResourceByIdsCall) Return(arg0 []domain.Resource, arg1 int64, arg2 error) *MockEncryptedSvcListExcludeAndFilterResourceByIdsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEncryptedSvcListExcludeAndFilterResourceByIdsCall) Do(f func(context.Context, []string, string, int64, int64, []int64, domain.Condition) ([]domain.Resource, int64, error)) *MockEncryptedSvcListExcludeAndFilterResourceByIdsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEncryptedSvcListExcludeAndFilterResourceByIdsCall) DoAndReturn(f func(context.Context, []string, string, int64, int64, []int64, domain.Condition) ([]domain.Resource, int64, error)) *MockEncryptedSvcListExcludeAndFilterResourceByIdsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListResource mocks base method.
func (m *MockEncryptedSvc) ListResource(ctx context.Context, fields []string, modelUid string, offset, limit int64) ([]domain.Resource, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResource", ctx, fields, modelUid, offset, limit)
	ret0, _ := ret[0].([]domain.Resource)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListResource indicates an expected call of ListResource.
func (mr *MockEncryptedSvcMockRecorder) ListResource(ctx, fields, modelUid, offset, limit any) *MockEncryptedSvcListResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResource", reflect.TypeOf((*MockEncryptedSvc)(nil).ListResource), ctx, fields, modelUid, offset, limit)
	return &MockEncryptedSvcListResourceCall{Call: call}
}

// MockEncryptedSvcListResourceCall wrap *gomock.Call
type MockEncryptedSvcListResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEncryptedSvcListResourceCall) Return(arg0 []domain.Resource, arg1 int64, arg2 error) *MockEncryptedSvcListResourceCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEncryptedSvcListResourceCall) Do(f func(context.Context, []string, string, int64, int64) ([]domain.Resource, int64, error)) *MockEncryptedSvcListResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEncryptedSvcListResourceCall) DoAndReturn(f func(context.Context, []string, string, int64, int64) ([]domain.Resource, int64, error)) *MockEncryptedSvcListResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListResourceByIds mocks base method.
func (m *MockEncryptedSvc) ListResourceByIds(ctx context.Context, fields []string, ids []int64) ([]domain.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceByIds", ctx, fields, ids)
	ret0, _ := ret[0].([]domain.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceByIds indicates an expected call of ListResourceByIds.
func (mr *MockEncryptedSvcMockRecorder) ListResourceByIds(ctx, fields, ids any) *MockEncryptedSvcListResourceByIdsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceByIds", reflect.TypeOf((*MockEncryptedSvc)(nil).ListResourceByIds), ctx, fields, ids)
	return &MockEncryptedSvcListResourceByIdsCall{Call: call}
}

// MockEncryptedSvcListResourceByIdsCall wrap *gomock.Call
type MockEncryptedSvcListResourceByIdsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEncryptedSvcListResourceByIdsCall) Return(arg0 []domain.Resource, arg1 error) *MockEncryptedSvcListResourceByIdsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEncryptedSvcListResourceByIdsCall) Do(f func(context.Context, []string, []int64) ([]domain.Resource, error)) *MockEncryptedSvcListResourceByIdsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEncryptedSvcListResourceByIdsCall) DoAndReturn(f func(context.Context, []string, []int64) ([]domain.Resource, error)) *MockEncryptedSvcListResourceByIdsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Search mocks base method.
func (m *MockEncryptedSvc) Search(ctx context.Context, text string) ([]domain.SearchResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, text)
	ret0, _ := ret[0].([]domain.SearchResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockEncryptedSvcMockRecorder) Search(ctx, text any) *MockEncryptedSvcSearchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockEncryptedSvc)(nil).Search), ctx, text)
	return &MockEncryptedSvcSearchCall{Call: call}
}

// MockEncryptedSvcSearchCall wrap *gomock.Call
type MockEncryptedSvcSearchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEncryptedSvcSearchCall) Return(arg0 []domain.SearchResource, arg1 error) *MockEncryptedSvcSearchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEncryptedSvcSearchCall) Do(f func(context.Context, string) ([]domain.SearchResource, error)) *MockEncryptedSvcSearchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEncryptedSvcSearchCall) DoAndReturn(f func(context.Context, string) ([]domain.SearchResource, error)) *MockEncryptedSvcSearchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCustomField mocks base method.
func (m *MockEncryptedSvc) SetCustomField(ctx context.Context, id int64, field string, data any) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCustomField", ctx, id, field, data)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCustomField indicates an expected call of SetCustomField.
func (mr *MockEncryptedSvcMockRecorder) SetCustomField(ctx, id, field, data any) *MockEncryptedSvcSetCustomFieldCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCustomField", reflect.TypeOf((*MockEncryptedSvc)(nil).SetCustomField), ctx, id, field, data)
	return &MockEncryptedSvcSetCustomFieldCall{Call: call}
}

// MockEncryptedSvcSetCustomFieldCall wrap *gomock.Call
type MockEncryptedSvcSetCustomFieldCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEncryptedSvcSetCustomFieldCall) Return(arg0 int64, arg1 error) *MockEncryptedSvcSetCustomFieldCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEncryptedSvcSetCustomFieldCall) Do(f func(context.Context, int64, string, any) (int64, error)) *MockEncryptedSvcSetCustomFieldCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEncryptedSvcSetCustomFieldCall) DoAndReturn(f func(context.Context, int64, string, any) (int64, error)) *MockEncryptedSvcSetCustomFieldCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateResource mocks base method.
func (m *MockEncryptedSvc) UpdateResource(ctx context.Context, resource domain.Resource) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResource", ctx, resource)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResource indicates an expected call of UpdateResource.
func (mr *MockEncryptedSvcMockRecorder) UpdateResource(ctx, resource any) *MockEncryptedSvcUpdateResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockEncryptedSvc)(nil).UpdateResource), ctx, resource)
	return &MockEncryptedSvcUpdateResourceCall{Call: call}
}

// MockEncryptedSvcUpdateResourceCall wrap *gomock.Call
type MockEncryptedSvcUpdateResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEncryptedSvcUpdateResourceCall) Return(arg0 int64, arg1 error) *MockEncryptedSvcUpdateResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEncryptedSvcUpdateResourceCall) Do(f func(context.Context, domain.Resource) (int64, error)) *MockEncryptedSvcUpdateResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEncryptedSvcUpdateResourceCall) DoAndReturn(f func(context.Context, domain.Resource) (int64, error)) *MockEncryptedSvcUpdateResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
