// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../../mocks/repository.mock.go --package=resourcemocks ResourceRepository
//

// Package resourcemocks is a generated GoMock package.
package resourcemocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Duke1616/ecmdb/internal/resource/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockResourceRepository is a mock of ResourceRepository interface.
type MockResourceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockResourceRepositoryMockRecorder
	isgomock struct{}
}

// MockResourceRepositoryMockRecorder is the mock recorder for MockResourceRepository.
type MockResourceRepositoryMockRecorder struct {
	mock *MockResourceRepository
}

// NewMockResourceRepository creates a new mock instance.
func NewMockResourceRepository(ctrl *gomock.Controller) *MockResourceRepository {
	mock := &MockResourceRepository{ctrl: ctrl}
	mock.recorder = &MockResourceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceRepository) EXPECT() *MockResourceRepositoryMockRecorder {
	return m.recorder
}

// BatchUpdateResources mocks base method.
func (m *MockResourceRepository) BatchUpdateResources(ctx context.Context, resources []domain.Resource) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateResources", ctx, resources)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateResources indicates an expected call of BatchUpdateResources.
func (mr *MockResourceRepositoryMockRecorder) BatchUpdateResources(ctx, resources any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateResources", reflect.TypeOf((*MockResourceRepository)(nil).BatchUpdateResources), ctx, resources)
}

// CountByModelUids mocks base method.
func (m *MockResourceRepository) CountByModelUids(ctx context.Context, modelUids []string) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByModelUids", ctx, modelUids)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByModelUids indicates an expected call of CountByModelUids.
func (mr *MockResourceRepositoryMockRecorder) CountByModelUids(ctx, modelUids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByModelUids", reflect.TypeOf((*MockResourceRepository)(nil).CountByModelUids), ctx, modelUids)
}

// CreateResource mocks base method.
func (m *MockResourceRepository) CreateResource(ctx context.Context, req domain.Resource) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResource", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResource indicates an expected call of CreateResource.
func (mr *MockResourceRepositoryMockRecorder) CreateResource(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResource", reflect.TypeOf((*MockResourceRepository)(nil).CreateResource), ctx, req)
}

// DeleteResource mocks base method.
func (m *MockResourceRepository) DeleteResource(ctx context.Context, id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockResourceRepositoryMockRecorder) DeleteResource(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockResourceRepository)(nil).DeleteResource), ctx, id)
}

// FindResourceById mocks base method.
func (m *MockResourceRepository) FindResourceById(ctx context.Context, fields []string, id int64) (domain.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindResourceById", ctx, fields, id)
	ret0, _ := ret[0].(domain.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindResourceById indicates an expected call of FindResourceById.
func (mr *MockResourceRepositoryMockRecorder) FindResourceById(ctx, fields, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindResourceById", reflect.TypeOf((*MockResourceRepository)(nil).FindResourceById), ctx, fields, id)
}

// FindSecureData mocks base method.
func (m *MockResourceRepository) FindSecureData(ctx context.Context, id int64, fieldUid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSecureData", ctx, id, fieldUid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSecureData indicates an expected call of FindSecureData.
func (mr *MockResourceRepositoryMockRecorder) FindSecureData(ctx, id, fieldUid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSecureData", reflect.TypeOf((*MockResourceRepository)(nil).FindSecureData), ctx, id, fieldUid)
}

// ListExcludeAndFilterResourceByIds mocks base method.
func (m *MockResourceRepository) ListExcludeAndFilterResourceByIds(ctx context.Context, fields []string, modelUid string, offset, limit int64, ids []int64, filter domain.Condition) ([]domain.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExcludeAndFilterResourceByIds", ctx, fields, modelUid, offset, limit, ids, filter)
	ret0, _ := ret[0].([]domain.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExcludeAndFilterResourceByIds indicates an expected call of ListExcludeAndFilterResourceByIds.
func (mr *MockResourceRepositoryMockRecorder) ListExcludeAndFilterResourceByIds(ctx, fields, modelUid, offset, limit, ids, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExcludeAndFilterResourceByIds", reflect.TypeOf((*MockResourceRepository)(nil).ListExcludeAndFilterResourceByIds), ctx, fields, modelUid, offset, limit, ids, filter)
}

// ListResource mocks base method.
func (m *MockResourceRepository) ListResource(ctx context.Context, fields []string, modelUid string, offset, limit int64) ([]domain.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResource", ctx, fields, modelUid, offset, limit)
	ret0, _ := ret[0].([]domain.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResource indicates an expected call of ListResource.
func (mr *MockResourceRepositoryMockRecorder) ListResource(ctx, fields, modelUid, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResource", reflect.TypeOf((*MockResourceRepository)(nil).ListResource), ctx, fields, modelUid, offset, limit)
}

// ListResourcesByIds mocks base method.
func (m *MockResourceRepository) ListResourcesByIds(ctx context.Context, fields []string, ids []int64) ([]domain.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourcesByIds", ctx, fields, ids)
	ret0, _ := ret[0].([]domain.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourcesByIds indicates an expected call of ListResourcesByIds.
func (mr *MockResourceRepositoryMockRecorder) ListResourcesByIds(ctx, fields, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourcesByIds", reflect.TypeOf((*MockResourceRepository)(nil).ListResourcesByIds), ctx, fields, ids)
}

// Search mocks base method.
func (m *MockResourceRepository) Search(ctx context.Context, text string) ([]domain.SearchResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, text)
	ret0, _ := ret[0].([]domain.SearchResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockResourceRepositoryMockRecorder) Search(ctx, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockResourceRepository)(nil).Search), ctx, text)
}

// SetCustomField mocks base method.
func (m *MockResourceRepository) SetCustomField(ctx context.Context, id int64, field string, data any) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCustomField", ctx, id, field, data)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCustomField indicates an expected call of SetCustomField.
func (mr *MockResourceRepositoryMockRecorder) SetCustomField(ctx, id, field, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCustomField", reflect.TypeOf((*MockResourceRepository)(nil).SetCustomField), ctx, id, field, data)
}

// TotalByModelUid mocks base method.
func (m *MockResourceRepository) TotalByModelUid(ctx context.Context, modelUid string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalByModelUid", ctx, modelUid)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalByModelUid indicates an expected call of TotalByModelUid.
func (mr *MockResourceRepositoryMockRecorder) TotalByModelUid(ctx, modelUid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalByModelUid", reflect.TypeOf((*MockResourceRepository)(nil).TotalByModelUid), ctx, modelUid)
}

// TotalExcludeAndFilterResourceByIds mocks base method.
func (m *MockResourceRepository) TotalExcludeAndFilterResourceByIds(ctx context.Context, modelUid string, ids []int64, filter domain.Condition) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalExcludeAndFilterResourceByIds", ctx, modelUid, ids, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalExcludeAndFilterResourceByIds indicates an expected call of TotalExcludeAndFilterResourceByIds.
func (mr *MockResourceRepositoryMockRecorder) TotalExcludeAndFilterResourceByIds(ctx, modelUid, ids, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalExcludeAndFilterResourceByIds", reflect.TypeOf((*MockResourceRepository)(nil).TotalExcludeAndFilterResourceByIds), ctx, modelUid, ids, filter)
}

// UpdateResource mocks base method.
func (m *MockResourceRepository) UpdateResource(ctx context.Context, resource domain.Resource) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResource", ctx, resource)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResource indicates an expected call of UpdateResource.
func (mr *MockResourceRepositoryMockRecorder) UpdateResource(ctx, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockResourceRepository)(nil).UpdateResource), ctx, resource)
}
