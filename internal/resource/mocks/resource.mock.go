// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -source=./service.go -destination=../../mocks/resource.mock.go -package=resourcemocks -typed Service
//

// Package resourcemocks is a generated GoMock package.
package resourcemocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Duke1616/ecmdb/internal/resource/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// BatchUpdateResources mocks base method.
func (m *MockService) BatchUpdateResources(ctx context.Context, resources []domain.Resource) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateResources", ctx, resources)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateResources indicates an expected call of BatchUpdateResources.
func (mr *MockServiceMockRecorder) BatchUpdateResources(ctx, resources any) *MockServiceBatchUpdateResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateResources", reflect.TypeOf((*MockService)(nil).BatchUpdateResources), ctx, resources)
	return &MockServiceBatchUpdateResourcesCall{Call: call}
}

// MockServiceBatchUpdateResourcesCall wrap *gomock.Call
type MockServiceBatchUpdateResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceBatchUpdateResourcesCall) Return(arg0 int64, arg1 error) *MockServiceBatchUpdateResourcesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceBatchUpdateResourcesCall) Do(f func(context.Context, []domain.Resource) (int64, error)) *MockServiceBatchUpdateResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceBatchUpdateResourcesCall) DoAndReturn(f func(context.Context, []domain.Resource) (int64, error)) *MockServiceBatchUpdateResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CountByModelUid mocks base method.
func (m *MockService) CountByModelUid(ctx context.Context, modelUid string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByModelUid", ctx, modelUid)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByModelUid indicates an expected call of CountByModelUid.
func (mr *MockServiceMockRecorder) CountByModelUid(ctx, modelUid any) *MockServiceCountByModelUidCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByModelUid", reflect.TypeOf((*MockService)(nil).CountByModelUid), ctx, modelUid)
	return &MockServiceCountByModelUidCall{Call: call}
}

// MockServiceCountByModelUidCall wrap *gomock.Call
type MockServiceCountByModelUidCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCountByModelUidCall) Return(arg0 int64, arg1 error) *MockServiceCountByModelUidCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCountByModelUidCall) Do(f func(context.Context, string) (int64, error)) *MockServiceCountByModelUidCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCountByModelUidCall) DoAndReturn(f func(context.Context, string) (int64, error)) *MockServiceCountByModelUidCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CountByModelUids mocks base method.
func (m *MockService) CountByModelUids(ctx context.Context, modelUids []string) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByModelUids", ctx, modelUids)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByModelUids indicates an expected call of CountByModelUids.
func (mr *MockServiceMockRecorder) CountByModelUids(ctx, modelUids any) *MockServiceCountByModelUidsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByModelUids", reflect.TypeOf((*MockService)(nil).CountByModelUids), ctx, modelUids)
	return &MockServiceCountByModelUidsCall{Call: call}
}

// MockServiceCountByModelUidsCall wrap *gomock.Call
type MockServiceCountByModelUidsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCountByModelUidsCall) Return(arg0 map[string]int, arg1 error) *MockServiceCountByModelUidsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCountByModelUidsCall) Do(f func(context.Context, []string) (map[string]int, error)) *MockServiceCountByModelUidsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCountByModelUidsCall) DoAndReturn(f func(context.Context, []string) (map[string]int, error)) *MockServiceCountByModelUidsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateResource mocks base method.
func (m *MockService) CreateResource(ctx context.Context, req domain.Resource) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResource", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResource indicates an expected call of CreateResource.
func (mr *MockServiceMockRecorder) CreateResource(ctx, req any) *MockServiceCreateResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResource", reflect.TypeOf((*MockService)(nil).CreateResource), ctx, req)
	return &MockServiceCreateResourceCall{Call: call}
}

// MockServiceCreateResourceCall wrap *gomock.Call
type MockServiceCreateResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateResourceCall) Return(arg0 int64, arg1 error) *MockServiceCreateResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateResourceCall) Do(f func(context.Context, domain.Resource) (int64, error)) *MockServiceCreateResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateResourceCall) DoAndReturn(f func(context.Context, domain.Resource) (int64, error)) *MockServiceCreateResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteResource mocks base method.
func (m *MockService) DeleteResource(ctx context.Context, id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockServiceMockRecorder) DeleteResource(ctx, id any) *MockServiceDeleteResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockService)(nil).DeleteResource), ctx, id)
	return &MockServiceDeleteResourceCall{Call: call}
}

// MockServiceDeleteResourceCall wrap *gomock.Call
type MockServiceDeleteResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceDeleteResourceCall) Return(arg0 int64, arg1 error) *MockServiceDeleteResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceDeleteResourceCall) Do(f func(context.Context, int64) (int64, error)) *MockServiceDeleteResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceDeleteResourceCall) DoAndReturn(f func(context.Context, int64) (int64, error)) *MockServiceDeleteResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindResourceById mocks base method.
func (m *MockService) FindResourceById(ctx context.Context, fields []string, id int64) (domain.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindResourceById", ctx, fields, id)
	ret0, _ := ret[0].(domain.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindResourceById indicates an expected call of FindResourceById.
func (mr *MockServiceMockRecorder) FindResourceById(ctx, fields, id any) *MockServiceFindResourceByIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindResourceById", reflect.TypeOf((*MockService)(nil).FindResourceById), ctx, fields, id)
	return &MockServiceFindResourceByIdCall{Call: call}
}

// MockServiceFindResourceByIdCall wrap *gomock.Call
type MockServiceFindResourceByIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceFindResourceByIdCall) Return(arg0 domain.Resource, arg1 error) *MockServiceFindResourceByIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceFindResourceByIdCall) Do(f func(context.Context, []string, int64) (domain.Resource, error)) *MockServiceFindResourceByIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceFindResourceByIdCall) DoAndReturn(f func(context.Context, []string, int64) (domain.Resource, error)) *MockServiceFindResourceByIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindSecureData mocks base method.
func (m *MockService) FindSecureData(ctx context.Context, id int64, fieldUid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSecureData", ctx, id, fieldUid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSecureData indicates an expected call of FindSecureData.
func (mr *MockServiceMockRecorder) FindSecureData(ctx, id, fieldUid any) *MockServiceFindSecureDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSecureData", reflect.TypeOf((*MockService)(nil).FindSecureData), ctx, id, fieldUid)
	return &MockServiceFindSecureDataCall{Call: call}
}

// MockServiceFindSecureDataCall wrap *gomock.Call
type MockServiceFindSecureDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceFindSecureDataCall) Return(arg0 string, arg1 error) *MockServiceFindSecureDataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceFindSecureDataCall) Do(f func(context.Context, int64, string) (string, error)) *MockServiceFindSecureDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceFindSecureDataCall) DoAndReturn(f func(context.Context, int64, string) (string, error)) *MockServiceFindSecureDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListBeforeUtime mocks base method.
func (m *MockService) ListBeforeUtime(ctx context.Context, utime int64, fields []string, modelUid string, offset, limit int64) ([]domain.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBeforeUtime", ctx, utime, fields, modelUid, offset, limit)
	ret0, _ := ret[0].([]domain.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBeforeUtime indicates an expected call of ListBeforeUtime.
func (mr *MockServiceMockRecorder) ListBeforeUtime(ctx, utime, fields, modelUid, offset, limit any) *MockServiceListBeforeUtimeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBeforeUtime", reflect.TypeOf((*MockService)(nil).ListBeforeUtime), ctx, utime, fields, modelUid, offset, limit)
	return &MockServiceListBeforeUtimeCall{Call: call}
}

// MockServiceListBeforeUtimeCall wrap *gomock.Call
type MockServiceListBeforeUtimeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceListBeforeUtimeCall) Return(arg0 []domain.Resource, arg1 error) *MockServiceListBeforeUtimeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceListBeforeUtimeCall) Do(f func(context.Context, int64, []string, string, int64, int64) ([]domain.Resource, error)) *MockServiceListBeforeUtimeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceListBeforeUtimeCall) DoAndReturn(f func(context.Context, int64, []string, string, int64, int64) ([]domain.Resource, error)) *MockServiceListBeforeUtimeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListExcludeAndFilterResourceByIds mocks base method.
func (m *MockService) ListExcludeAndFilterResourceByIds(ctx context.Context, fields []string, modelUid string, offset, limit int64, ids []int64, filter domain.Condition) ([]domain.Resource, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExcludeAndFilterResourceByIds", ctx, fields, modelUid, offset, limit, ids, filter)
	ret0, _ := ret[0].([]domain.Resource)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListExcludeAndFilterResourceByIds indicates an expected call of ListExcludeAndFilterResourceByIds.
func (mr *MockServiceMockRecorder) ListExcludeAndFilterResourceByIds(ctx, fields, modelUid, offset, limit, ids, filter any) *MockServiceListExcludeAndFilterResourceByIdsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExcludeAndFilterResourceByIds", reflect.TypeOf((*MockService)(nil).ListExcludeAndFilterResourceByIds), ctx, fields, modelUid, offset, limit, ids, filter)
	return &MockServiceListExcludeAndFilterResourceByIdsCall{Call: call}
}

// MockServiceListExcludeAndFilterResourceByIdsCall wrap *gomock.Call
type MockServiceListExcludeAndFilterResourceByIdsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceListExcludeAndFilterResourceByIdsCall) Return(arg0 []domain.Resource, arg1 int64, arg2 error) *MockServiceListExcludeAndFilterResourceByIdsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceListExcludeAndFilterResourceByIdsCall) Do(f func(context.Context, []string, string, int64, int64, []int64, domain.Condition) ([]domain.Resource, int64, error)) *MockServiceListExcludeAndFilterResourceByIdsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceListExcludeAndFilterResourceByIdsCall) DoAndReturn(f func(context.Context, []string, string, int64, int64, []int64, domain.Condition) ([]domain.Resource, int64, error)) *MockServiceListExcludeAndFilterResourceByIdsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListResource mocks base method.
func (m *MockService) ListResource(ctx context.Context, fields []string, modelUid string, offset, limit int64) ([]domain.Resource, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResource", ctx, fields, modelUid, offset, limit)
	ret0, _ := ret[0].([]domain.Resource)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListResource indicates an expected call of ListResource.
func (mr *MockServiceMockRecorder) ListResource(ctx, fields, modelUid, offset, limit any) *MockServiceListResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResource", reflect.TypeOf((*MockService)(nil).ListResource), ctx, fields, modelUid, offset, limit)
	return &MockServiceListResourceCall{Call: call}
}

// MockServiceListResourceCall wrap *gomock.Call
type MockServiceListResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceListResourceCall) Return(arg0 []domain.Resource, arg1 int64, arg2 error) *MockServiceListResourceCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceListResourceCall) Do(f func(context.Context, []string, string, int64, int64) ([]domain.Resource, int64, error)) *MockServiceListResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceListResourceCall) DoAndReturn(f func(context.Context, []string, string, int64, int64) ([]domain.Resource, int64, error)) *MockServiceListResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListResourceByIds mocks base method.
func (m *MockService) ListResourceByIds(ctx context.Context, fields []string, ids []int64) ([]domain.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceByIds", ctx, fields, ids)
	ret0, _ := ret[0].([]domain.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceByIds indicates an expected call of ListResourceByIds.
func (mr *MockServiceMockRecorder) ListResourceByIds(ctx, fields, ids any) *MockServiceListResourceByIdsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceByIds", reflect.TypeOf((*MockService)(nil).ListResourceByIds), ctx, fields, ids)
	return &MockServiceListResourceByIdsCall{Call: call}
}

// MockServiceListResourceByIdsCall wrap *gomock.Call
type MockServiceListResourceByIdsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceListResourceByIdsCall) Return(arg0 []domain.Resource, arg1 error) *MockServiceListResourceByIdsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceListResourceByIdsCall) Do(f func(context.Context, []string, []int64) ([]domain.Resource, error)) *MockServiceListResourceByIdsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceListResourceByIdsCall) DoAndReturn(f func(context.Context, []string, []int64) ([]domain.Resource, error)) *MockServiceListResourceByIdsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Search mocks base method.
func (m *MockService) Search(ctx context.Context, text string) ([]domain.SearchResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, text)
	ret0, _ := ret[0].([]domain.SearchResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockServiceMockRecorder) Search(ctx, text any) *MockServiceSearchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockService)(nil).Search), ctx, text)
	return &MockServiceSearchCall{Call: call}
}

// MockServiceSearchCall wrap *gomock.Call
type MockServiceSearchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSearchCall) Return(arg0 []domain.SearchResource, arg1 error) *MockServiceSearchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSearchCall) Do(f func(context.Context, string) ([]domain.SearchResource, error)) *MockServiceSearchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSearchCall) DoAndReturn(f func(context.Context, string) ([]domain.SearchResource, error)) *MockServiceSearchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCustomField mocks base method.
func (m *MockService) SetCustomField(ctx context.Context, id int64, field string, data any) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCustomField", ctx, id, field, data)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCustomField indicates an expected call of SetCustomField.
func (mr *MockServiceMockRecorder) SetCustomField(ctx, id, field, data any) *MockServiceSetCustomFieldCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCustomField", reflect.TypeOf((*MockService)(nil).SetCustomField), ctx, id, field, data)
	return &MockServiceSetCustomFieldCall{Call: call}
}

// MockServiceSetCustomFieldCall wrap *gomock.Call
type MockServiceSetCustomFieldCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSetCustomFieldCall) Return(arg0 int64, arg1 error) *MockServiceSetCustomFieldCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSetCustomFieldCall) Do(f func(context.Context, int64, string, any) (int64, error)) *MockServiceSetCustomFieldCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSetCustomFieldCall) DoAndReturn(f func(context.Context, int64, string, any) (int64, error)) *MockServiceSetCustomFieldCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateResource mocks base method.
func (m *MockService) UpdateResource(ctx context.Context, resource domain.Resource) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResource", ctx, resource)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResource indicates an expected call of UpdateResource.
func (mr *MockServiceMockRecorder) UpdateResource(ctx, resource any) *MockServiceUpdateResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockService)(nil).UpdateResource), ctx, resource)
	return &MockServiceUpdateResourceCall{Call: call}
}

// MockServiceUpdateResourceCall wrap *gomock.Call
type MockServiceUpdateResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateResourceCall) Return(arg0 int64, arg1 error) *MockServiceUpdateResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateResourceCall) Do(f func(context.Context, domain.Resource) (int64, error)) *MockServiceUpdateResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateResourceCall) DoAndReturn(f func(context.Context, domain.Resource) (int64, error)) *MockServiceUpdateResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
