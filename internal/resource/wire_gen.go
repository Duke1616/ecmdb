// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package resource

import (
	"context"
	"github.com/Duke1616/ecmdb/internal/attribute"
	"github.com/Duke1616/ecmdb/internal/relation"
	"github.com/Duke1616/ecmdb/internal/resource/internal/event"
	"github.com/Duke1616/ecmdb/internal/resource/internal/repository"
	"github.com/Duke1616/ecmdb/internal/resource/internal/repository/dao"
	"github.com/Duke1616/ecmdb/internal/resource/internal/service"
	"github.com/Duke1616/ecmdb/internal/resource/internal/web"
	"github.com/Duke1616/ecmdb/pkg/cryptox"
	"github.com/Duke1616/ecmdb/pkg/mongox"
	"github.com/ecodeclub/mq-api"
	"github.com/google/wire"
	"sync"
)

// Injectors from wire.go:

func InitModule(db *mongox.Mongo, attributeModule *attribute.Module, relationModule *relation.Module, q mq.MQ, crypto *cryptox.CryptoRegistry) (*Module, error) {
	resourceDAO := InitResourceDAO(db)
	resourceRepository := repository.NewResourceRepository(resourceDAO)
	service := NewService(resourceRepository)
	serviceService := attributeModule.Svc
	cryptoxCrypto := InitCrypto(crypto)
	encryptedSvc := NewEncryptedService(service, serviceService, cryptoxCrypto)
	relationResourceService := relationModule.RRSvc
	handler := web.NewHandler(encryptedSvc, serviceService, relationResourceService)
	fieldSecureAttrChangeConsumer := initConsumer(q, encryptedSvc, cryptoxCrypto)
	module := &Module{
		Svc:          service,
		EncryptedSvc: encryptedSvc,
		Hdl:          handler,
		c:            fieldSecureAttrChangeConsumer,
	}
	return module, nil
}

// wire.go:

var ProviderSet = wire.NewSet(web.NewHandler, repository.NewResourceRepository)

var daoOnce = sync.Once{}

func InitCollectionOnce(db *mongox.Mongo) {
	daoOnce.Do(func() {
		err := dao.InitIndexes(db)
		if err != nil {
			panic(err)
		}
	})
}

func InitResourceDAO(db *mongox.Mongo) dao.ResourceDAO {
	InitCollectionOnce(db)
	return dao.NewResourceDAO(db)
}

func NewService(repo repository.ResourceRepository) Service {
	return service.NewService(repo)
}

func NewEncryptedService(baseSvc service.Service, attrSvc attribute.Service, cryptox2 cryptox.Crypto[string]) EncryptedSvc {
	return service.NewEncryptedResourceService(baseSvc, attrSvc, cryptox2)
}

func InitCrypto(reg *cryptox.CryptoRegistry) cryptox.Crypto[string] {
	return reg.Resource
}

func initConsumer(q mq.MQ, svc service.EncryptedSvc, cryptox2 cryptox.Crypto[string]) *event.FieldSecureAttrChangeConsumer {
	consumer, err := event.NewFieldSecureAttrChangeConsumer(q, svc, 20, cryptox2)
	if err != nil {
		panic(err)
	}

	consumer.Start(context.Background())
	return consumer
}
