// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -source=./service.go -package=templatemocks -destination=../../mocks/template.mock.go -typed Service
//

// Package templatemocks is a generated GoMock package.
package templatemocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/Duke1616/ecmdb/internal/template/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateTemplate mocks base method.
func (m *MockService) CreateTemplate(ctx context.Context, req domain.Template) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplate", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemplate indicates an expected call of CreateTemplate.
func (mr *MockServiceMockRecorder) CreateTemplate(ctx, req any) *MockServiceCreateTemplateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplate", reflect.TypeOf((*MockService)(nil).CreateTemplate), ctx, req)
	return &MockServiceCreateTemplateCall{Call: call}
}

// MockServiceCreateTemplateCall wrap *gomock.Call
type MockServiceCreateTemplateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateTemplateCall) Return(arg0 int64, arg1 error) *MockServiceCreateTemplateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateTemplateCall) Do(f func(context.Context, domain.Template) (int64, error)) *MockServiceCreateTemplateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateTemplateCall) DoAndReturn(f func(context.Context, domain.Template) (int64, error)) *MockServiceCreateTemplateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteTemplate mocks base method.
func (m *MockService) DeleteTemplate(ctx context.Context, id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplate", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTemplate indicates an expected call of DeleteTemplate.
func (mr *MockServiceMockRecorder) DeleteTemplate(ctx, id any) *MockServiceDeleteTemplateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplate", reflect.TypeOf((*MockService)(nil).DeleteTemplate), ctx, id)
	return &MockServiceDeleteTemplateCall{Call: call}
}

// MockServiceDeleteTemplateCall wrap *gomock.Call
type MockServiceDeleteTemplateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceDeleteTemplateCall) Return(arg0 int64, arg1 error) *MockServiceDeleteTemplateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceDeleteTemplateCall) Do(f func(context.Context, int64) (int64, error)) *MockServiceDeleteTemplateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceDeleteTemplateCall) DoAndReturn(f func(context.Context, int64) (int64, error)) *MockServiceDeleteTemplateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetailTemplate mocks base method.
func (m *MockService) DetailTemplate(ctx context.Context, id int64) (domain.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailTemplate", ctx, id)
	ret0, _ := ret[0].(domain.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetailTemplate indicates an expected call of DetailTemplate.
func (mr *MockServiceMockRecorder) DetailTemplate(ctx, id any) *MockServiceDetailTemplateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailTemplate", reflect.TypeOf((*MockService)(nil).DetailTemplate), ctx, id)
	return &MockServiceDetailTemplateCall{Call: call}
}

// MockServiceDetailTemplateCall wrap *gomock.Call
type MockServiceDetailTemplateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceDetailTemplateCall) Return(arg0 domain.Template, arg1 error) *MockServiceDetailTemplateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceDetailTemplateCall) Do(f func(context.Context, int64) (domain.Template, error)) *MockServiceDetailTemplateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceDetailTemplateCall) DoAndReturn(f func(context.Context, int64) (domain.Template, error)) *MockServiceDetailTemplateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetailTemplateByExternalTemplateId mocks base method.
func (m *MockService) DetailTemplateByExternalTemplateId(ctx context.Context, externalId string) (domain.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailTemplateByExternalTemplateId", ctx, externalId)
	ret0, _ := ret[0].(domain.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetailTemplateByExternalTemplateId indicates an expected call of DetailTemplateByExternalTemplateId.
func (mr *MockServiceMockRecorder) DetailTemplateByExternalTemplateId(ctx, externalId any) *MockServiceDetailTemplateByExternalTemplateIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailTemplateByExternalTemplateId", reflect.TypeOf((*MockService)(nil).DetailTemplateByExternalTemplateId), ctx, externalId)
	return &MockServiceDetailTemplateByExternalTemplateIdCall{Call: call}
}

// MockServiceDetailTemplateByExternalTemplateIdCall wrap *gomock.Call
type MockServiceDetailTemplateByExternalTemplateIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceDetailTemplateByExternalTemplateIdCall) Return(arg0 domain.Template, arg1 error) *MockServiceDetailTemplateByExternalTemplateIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceDetailTemplateByExternalTemplateIdCall) Do(f func(context.Context, string) (domain.Template, error)) *MockServiceDetailTemplateByExternalTemplateIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceDetailTemplateByExternalTemplateIdCall) DoAndReturn(f func(context.Context, string) (domain.Template, error)) *MockServiceDetailTemplateByExternalTemplateIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindByTemplateIds mocks base method.
func (m *MockService) FindByTemplateIds(ctx context.Context, ids []int64) ([]domain.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTemplateIds", ctx, ids)
	ret0, _ := ret[0].([]domain.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTemplateIds indicates an expected call of FindByTemplateIds.
func (mr *MockServiceMockRecorder) FindByTemplateIds(ctx, ids any) *MockServiceFindByTemplateIdsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTemplateIds", reflect.TypeOf((*MockService)(nil).FindByTemplateIds), ctx, ids)
	return &MockServiceFindByTemplateIdsCall{Call: call}
}

// MockServiceFindByTemplateIdsCall wrap *gomock.Call
type MockServiceFindByTemplateIdsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceFindByTemplateIdsCall) Return(arg0 []domain.Template, arg1 error) *MockServiceFindByTemplateIdsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceFindByTemplateIdsCall) Do(f func(context.Context, []int64) ([]domain.Template, error)) *MockServiceFindByTemplateIdsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceFindByTemplateIdsCall) DoAndReturn(f func(context.Context, []int64) ([]domain.Template, error)) *MockServiceFindByTemplateIdsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindOrCreateByWechat mocks base method.
func (m *MockService) FindOrCreateByWechat(ctx context.Context, req domain.WechatInfo) (domain.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrCreateByWechat", ctx, req)
	ret0, _ := ret[0].(domain.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrCreateByWechat indicates an expected call of FindOrCreateByWechat.
func (mr *MockServiceMockRecorder) FindOrCreateByWechat(ctx, req any) *MockServiceFindOrCreateByWechatCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrCreateByWechat", reflect.TypeOf((*MockService)(nil).FindOrCreateByWechat), ctx, req)
	return &MockServiceFindOrCreateByWechatCall{Call: call}
}

// MockServiceFindOrCreateByWechatCall wrap *gomock.Call
type MockServiceFindOrCreateByWechatCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceFindOrCreateByWechatCall) Return(arg0 domain.Template, arg1 error) *MockServiceFindOrCreateByWechatCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceFindOrCreateByWechatCall) Do(f func(context.Context, domain.WechatInfo) (domain.Template, error)) *MockServiceFindOrCreateByWechatCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceFindOrCreateByWechatCall) DoAndReturn(f func(context.Context, domain.WechatInfo) (domain.Template, error)) *MockServiceFindOrCreateByWechatCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByWorkflowId mocks base method.
func (m *MockService) GetByWorkflowId(ctx context.Context, workflowId int64) ([]domain.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByWorkflowId", ctx, workflowId)
	ret0, _ := ret[0].([]domain.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByWorkflowId indicates an expected call of GetByWorkflowId.
func (mr *MockServiceMockRecorder) GetByWorkflowId(ctx, workflowId any) *MockServiceGetByWorkflowIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByWorkflowId", reflect.TypeOf((*MockService)(nil).GetByWorkflowId), ctx, workflowId)
	return &MockServiceGetByWorkflowIdCall{Call: call}
}

// MockServiceGetByWorkflowIdCall wrap *gomock.Call
type MockServiceGetByWorkflowIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGetByWorkflowIdCall) Return(arg0 []domain.Template, arg1 error) *MockServiceGetByWorkflowIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGetByWorkflowIdCall) Do(f func(context.Context, int64) ([]domain.Template, error)) *MockServiceGetByWorkflowIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGetByWorkflowIdCall) DoAndReturn(f func(context.Context, int64) ([]domain.Template, error)) *MockServiceGetByWorkflowIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListTemplate mocks base method.
func (m *MockService) ListTemplate(ctx context.Context, offset, limit int64) ([]domain.Template, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplate", ctx, offset, limit)
	ret0, _ := ret[0].([]domain.Template)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTemplate indicates an expected call of ListTemplate.
func (mr *MockServiceMockRecorder) ListTemplate(ctx, offset, limit any) *MockServiceListTemplateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplate", reflect.TypeOf((*MockService)(nil).ListTemplate), ctx, offset, limit)
	return &MockServiceListTemplateCall{Call: call}
}

// MockServiceListTemplateCall wrap *gomock.Call
type MockServiceListTemplateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceListTemplateCall) Return(arg0 []domain.Template, arg1 int64, arg2 error) *MockServiceListTemplateCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceListTemplateCall) Do(f func(context.Context, int64, int64) ([]domain.Template, int64, error)) *MockServiceListTemplateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceListTemplateCall) DoAndReturn(f func(context.Context, int64, int64) ([]domain.Template, int64, error)) *MockServiceListTemplateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Pipeline mocks base method.
func (m *MockService) Pipeline(ctx context.Context) ([]domain.TemplateCombination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pipeline", ctx)
	ret0, _ := ret[0].([]domain.TemplateCombination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pipeline indicates an expected call of Pipeline.
func (mr *MockServiceMockRecorder) Pipeline(ctx any) *MockServicePipelineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipeline", reflect.TypeOf((*MockService)(nil).Pipeline), ctx)
	return &MockServicePipelineCall{Call: call}
}

// MockServicePipelineCall wrap *gomock.Call
type MockServicePipelineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServicePipelineCall) Return(arg0 []domain.TemplateCombination, arg1 error) *MockServicePipelineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServicePipelineCall) Do(f func(context.Context) ([]domain.TemplateCombination, error)) *MockServicePipelineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServicePipelineCall) DoAndReturn(f func(context.Context) ([]domain.TemplateCombination, error)) *MockServicePipelineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateTemplate mocks base method.
func (m *MockService) UpdateTemplate(ctx context.Context, t domain.Template) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTemplate", ctx, t)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTemplate indicates an expected call of UpdateTemplate.
func (mr *MockServiceMockRecorder) UpdateTemplate(ctx, t any) *MockServiceUpdateTemplateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplate", reflect.TypeOf((*MockService)(nil).UpdateTemplate), ctx, t)
	return &MockServiceUpdateTemplateCall{Call: call}
}

// MockServiceUpdateTemplateCall wrap *gomock.Call
type MockServiceUpdateTemplateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateTemplateCall) Return(arg0 int64, arg1 error) *MockServiceUpdateTemplateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateTemplateCall) Do(f func(context.Context, domain.Template) (int64, error)) *MockServiceUpdateTemplateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateTemplateCall) DoAndReturn(f func(context.Context, domain.Template) (int64, error)) *MockServiceUpdateTemplateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
