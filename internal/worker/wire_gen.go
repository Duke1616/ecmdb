// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package worker

import (
	"github.com/Duke1616/ecmdb/internal/runner"
	"github.com/Duke1616/ecmdb/internal/worker/internal/event"
	"github.com/Duke1616/ecmdb/internal/worker/internal/repository"
	"github.com/Duke1616/ecmdb/internal/worker/internal/repository/dao"
	"github.com/Duke1616/ecmdb/internal/worker/internal/service"
	"github.com/Duke1616/ecmdb/internal/worker/internal/web"
	"github.com/Duke1616/ecmdb/pkg/mongox"
	"github.com/ecodeclub/mq-api"
	"github.com/google/wire"
	"go.etcd.io/etcd/client/v3"
)

// Injectors from wire.go:

func InitModule(q mq.MQ, db *mongox.Mongo, etcdClient *clientv3.Client, runnerModule *runner.Module) (*Module, error) {
	serviceService := runnerModule.Svc
	workerDAO := dao.NewWorkerDAO(db)
	workerRepository := repository.NewWorkerRepository(workerDAO)
	service2 := service.NewService(q, serviceService, workerRepository)
	taskWorkerWatch := initWatch(etcdClient, service2)
	handler := web.NewHandler(service2)
	module := &Module{
		Svc: service2,
		w:   taskWorkerWatch,
		Hdl: handler,
	}
	return module, nil
}

// wire.go:

var ProviderSet = wire.NewSet(web.NewHandler, service.NewService, repository.NewWorkerRepository, dao.NewWorkerDAO)

func initWatch(etcdClient *clientv3.Client, svc service.Service) *event.TaskWorkerWatch {
	task, err := event.NewTaskWorkerWatch(etcdClient, svc)
	if err != nil {
		panic(err)
	}

	go task.Watch()
	return task
}
