// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package worker

import (
	"context"
	"github.com/Duke1616/ecmdb/internal/runner"
	"github.com/Duke1616/ecmdb/internal/worker/internal/event"
	"github.com/Duke1616/ecmdb/internal/worker/internal/repository"
	"github.com/Duke1616/ecmdb/internal/worker/internal/repository/dao"
	"github.com/Duke1616/ecmdb/internal/worker/internal/service"
	"github.com/Duke1616/ecmdb/internal/worker/internal/web"
	"github.com/Duke1616/ecmdb/pkg/mongox"
	"github.com/ecodeclub/mq-api"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitModule(q mq.MQ, db *mongox.Mongo, runnerModule *runner.Module) (*Module, error) {
	serviceService := runnerModule.Svc
	workerDAO := dao.NewWorkerDAO(db)
	workerRepository := repository.NewWorkerRepository(workerDAO)
	service2 := service.NewService(q, serviceService, workerRepository)
	taskWorkerConsumer := initConsumer(service2, q)
	handler := web.NewHandler(service2)
	module := &Module{
		Svc: service2,
		c:   taskWorkerConsumer,
		Hdl: handler,
	}
	return module, nil
}

// wire.go:

var ProviderSet = wire.NewSet(web.NewHandler, service.NewService, repository.NewWorkerRepository, dao.NewWorkerDAO)

func initConsumer(svc service.Service, q mq.MQ) *event.TaskWorkerConsumer {
	consumer, err := event.NewTaskWorkerConsumer(svc, q)
	if err != nil {
		panic(err)
	}

	consumer.Start(context.Background())
	return consumer
}
