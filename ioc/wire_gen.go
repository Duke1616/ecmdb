// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"github.com/Duke1616/ecmdb/internal/attribute"
	"github.com/Duke1616/ecmdb/internal/codebook"
	"github.com/Duke1616/ecmdb/internal/department"
	"github.com/Duke1616/ecmdb/internal/discovery"
	"github.com/Duke1616/ecmdb/internal/endpoint"
	"github.com/Duke1616/ecmdb/internal/engine"
	"github.com/Duke1616/ecmdb/internal/event"
	"github.com/Duke1616/ecmdb/internal/menu"
	"github.com/Duke1616/ecmdb/internal/model"
	"github.com/Duke1616/ecmdb/internal/order"
	"github.com/Duke1616/ecmdb/internal/permission"
	"github.com/Duke1616/ecmdb/internal/pkg/middleware"
	"github.com/Duke1616/ecmdb/internal/policy"
	"github.com/Duke1616/ecmdb/internal/relation"
	"github.com/Duke1616/ecmdb/internal/resource"
	"github.com/Duke1616/ecmdb/internal/role"
	"github.com/Duke1616/ecmdb/internal/rota"
	"github.com/Duke1616/ecmdb/internal/runner"
	"github.com/Duke1616/ecmdb/internal/strategy"
	"github.com/Duke1616/ecmdb/internal/task"
	"github.com/Duke1616/ecmdb/internal/template"
	"github.com/Duke1616/ecmdb/internal/terminal"
	"github.com/Duke1616/ecmdb/internal/tools"
	"github.com/Duke1616/ecmdb/internal/user"
	"github.com/Duke1616/ecmdb/internal/worker"
	"github.com/Duke1616/ecmdb/internal/workflow"
	"github.com/google/wire"
)

import (
	_ "github.com/go-sql-driver/mysql"
)

// Injectors from wire.go:

func InitApp() (*App, error) {
	cmdable := InitRedis()
	provider := InitSession(cmdable)
	db := InitMySQLDB()
	syncedEnforcer := InitCasbin(db)
	module, err := policy.InitModule(syncedEnforcer)
	if err != nil {
		return nil, err
	}
	service := module.Svc
	checkPolicyMiddlewareBuilder := middleware.NewCheckPolicyMiddlewareBuilder(service)
	v := InitGinMiddlewares()
	mongo := InitMongoDB()
	relationModule, err := relation.InitModule(mongo)
	if err != nil {
		return nil, err
	}
	attributeModule, err := attribute.InitModule(mongo)
	if err != nil {
		return nil, err
	}
	resourceModule, err := resource.InitModule(mongo, attributeModule, relationModule)
	if err != nil {
		return nil, err
	}
	modelModule, err := model.InitModule(mongo, relationModule, attributeModule, resourceModule)
	if err != nil {
		return nil, err
	}
	handler := modelModule.Hdl
	webHandler := attributeModule.Hdl
	handler2 := resourceModule.Hdl
	relationModelHandler := relationModule.RMHdl
	relationResourceHandler := relationModule.RRHdl
	mq := InitMQ()
	client := InitEtcdClient()
	workerModule, err := worker.InitModule(mq, mongo, client)
	if err != nil {
		return nil, err
	}
	handler3 := workerModule.Hdl
	relationTypeHandler := relationModule.RTHdl
	redisearchClient := InitRediSearch()
	config := InitLdapConfig()
	departmentModule, err := department.InitModule(mongo)
	if err != nil {
		return nil, err
	}
	userModule, err := user.InitModule(mongo, redisearchClient, config, module, departmentModule)
	if err != nil {
		return nil, err
	}
	handler4 := userModule.Hdl
	workwxApp := InitWorkWx()
	templateModule, err := template.InitModule(mq, mongo, workwxApp)
	if err != nil {
		return nil, err
	}
	handler5 := templateModule.Hdl
	strategyModule, err := strategy.InitModule(templateModule)
	if err != nil {
		return nil, err
	}
	handler6 := strategyModule.Hdl
	codebookModule, err := codebook.InitModule(mongo)
	if err != nil {
		return nil, err
	}
	handler7 := codebookModule.Hdl
	engineModule, err := engine.InitModule(db)
	if err != nil {
		return nil, err
	}
	workflowModule, err := workflow.InitModule(mongo, engineModule)
	if err != nil {
		return nil, err
	}
	runnerModule, err := runner.InitModule(mongo, mq, workerModule, workflowModule, codebookModule)
	if err != nil {
		return nil, err
	}
	handler8 := runnerModule.Hdl
	larkClient := InitFeishu()
	orderModule, err := order.InitModule(mq, mongo, workflowModule, engineModule, templateModule, userModule, larkClient)
	if err != nil {
		return nil, err
	}
	handler9 := orderModule.Hdl
	handler10 := workflowModule.Hdl
	groupHandler := templateModule.GroupHdl
	handler11 := engineModule.Hdl
	discoveryModule, err := discovery.InitModule(mongo)
	if err != nil {
		return nil, err
	}
	taskModule, err := task.InitModule(mq, mongo, orderModule, workflowModule, engineModule, codebookModule, workerModule, runnerModule, userModule, discoveryModule, larkClient)
	if err != nil {
		return nil, err
	}
	handler12 := taskModule.Hdl
	handler13 := module.Hdl
	menuModule, err := menu.InitModule(mq, mongo)
	if err != nil {
		return nil, err
	}
	handler14 := menuModule.Hdl
	endpointModule, err := endpoint.InitModule(mongo)
	if err != nil {
		return nil, err
	}
	handler15 := endpointModule.Hdl
	roleModule, err := role.InitModule(mongo)
	if err != nil {
		return nil, err
	}
	handler16 := roleModule.Hdl
	permissionModule, err := permission.InitModule(mongo, mq, roleModule, menuModule, module)
	if err != nil {
		return nil, err
	}
	handler17 := permissionModule.Hdl
	handler18 := departmentModule.Hdl
	minioClient := InitMinioClient()
	handler19, err := tools.InitModule(minioClient)
	if err != nil {
		return nil, err
	}
	handler20, err := terminal.InitModule(relationModule, resourceModule, attributeModule)
	if err != nil {
		return nil, err
	}
	rotaModule, err := rota.InitModule(mongo)
	if err != nil {
		return nil, err
	}
	handler21 := rotaModule.Hdl
	handler22 := discoveryModule.Hdl
	ginEngine := InitWebServer(provider, checkPolicyMiddlewareBuilder, v, handler, webHandler, handler2, relationModelHandler, relationResourceHandler, handler3, relationTypeHandler, handler4, handler5, handler6, handler7, handler8, handler9, handler10, groupHandler, handler11, handler12, handler13, handler14, handler15, handler16, handler17, handler18, handler19, handler20, handler21, handler22)
	eventModule, err := event.InitModule(mq, db, engineModule, taskModule, orderModule, templateModule, userModule, workflowModule, departmentModule, larkClient)
	if err != nil {
		return nil, err
	}
	processEvent := eventModule.Event
	startTaskJob := taskModule.StartTaskJob
	passProcessTaskJob := taskModule.PassProcessTaskJob
	v2 := initCronJobs(startTaskJob, passProcessTaskJob)
	serviceService := endpointModule.Svc
	app := &App{
		Web:   ginEngine,
		Event: processEvent,
		Jobs:  v2,
		Svc:   serviceService,
	}
	return app, nil
}

// wire.go:

var BaseSet = wire.NewSet(InitMongoDB, InitMySQLDB, InitRedis, InitMinioClient, InitMQ,
	InitRediSearch, InitEtcdClient, InitWorkWx, InitFeishu)
