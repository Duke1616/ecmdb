// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"github.com/Duke1616/ecmdb/internal/attribute"
	"github.com/Duke1616/ecmdb/internal/codebook"
	"github.com/Duke1616/ecmdb/internal/model"
	"github.com/Duke1616/ecmdb/internal/order"
	"github.com/Duke1616/ecmdb/internal/relation"
	"github.com/Duke1616/ecmdb/internal/resource"
	"github.com/Duke1616/ecmdb/internal/runner"
	"github.com/Duke1616/ecmdb/internal/strategy"
	"github.com/Duke1616/ecmdb/internal/task"
	"github.com/Duke1616/ecmdb/internal/template"
	"github.com/Duke1616/ecmdb/internal/user"
	"github.com/Duke1616/ecmdb/internal/worker"
	"github.com/Duke1616/ecmdb/internal/workflow"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitApp() (*App, error) {
	cmdable := InitRedis()
	provider := InitSession(cmdable)
	v := InitGinMiddlewares()
	mongo := InitMongoDB()
	module, err := relation.InitModule(mongo)
	if err != nil {
		return nil, err
	}
	attributeModule, err := attribute.InitModule(mongo)
	if err != nil {
		return nil, err
	}
	resourceModule, err := resource.InitModule(mongo, attributeModule, module)
	if err != nil {
		return nil, err
	}
	modelModule, err := model.InitModule(mongo, module, attributeModule, resourceModule)
	if err != nil {
		return nil, err
	}
	handler := modelModule.Hdl
	webHandler := attributeModule.Hdl
	handler2 := resourceModule.Hdl
	relationModelHandler := module.RMHdl
	relationResourceHandler := module.RRHdl
	mq := InitMQ()
	client := InitEtcdClient()
	workerModule, err := worker.InitModule(mq, mongo, client)
	if err != nil {
		return nil, err
	}
	handler3 := workerModule.Hdl
	relationTypeHandler := module.RTHdl
	config := InitLdapConfig()
	userModule, err := user.InitModule(mongo, config)
	if err != nil {
		return nil, err
	}
	handler4 := userModule.Hdl
	workwxApp := InitWorkWx()
	templateModule, err := template.InitModule(mq, mongo, workwxApp)
	if err != nil {
		return nil, err
	}
	handler5 := templateModule.Hdl
	strategyModule, err := strategy.InitModule(templateModule)
	if err != nil {
		return nil, err
	}
	handler6 := strategyModule.Hdl
	codebookModule, err := codebook.InitModule(mongo)
	if err != nil {
		return nil, err
	}
	handler7 := codebookModule.Hdl
	runnerModule, err := runner.InitModule(mongo, mq, workerModule, codebookModule)
	if err != nil {
		return nil, err
	}
	handler8 := runnerModule.Hdl
	orderModule, err := order.InitModule(mq, mongo)
	if err != nil {
		return nil, err
	}
	handler9 := orderModule.Hdl
	workflowModule, err := workflow.InitModule(mongo)
	if err != nil {
		return nil, err
	}
	handler10 := workflowModule.Hdl
	db := InitMySQLDB()
	taskModule, err := task.InitModule(db, mq, workflowModule)
	if err != nil {
		return nil, err
	}
	handler11 := taskModule.Hdl
	groupHandler := templateModule.GroupHdl
	engine := InitWebServer(provider, v, handler, webHandler, handler2, relationModelHandler, relationResourceHandler, handler3, relationTypeHandler, handler4, handler5, handler6, handler7, handler8, handler9, handler10, handler11, groupHandler)
	app := &App{
		Web: engine,
	}
	return app, nil
}

// wire.go:

var BaseSet = wire.NewSet(InitMongoDB, InitMySQLDB, InitRedis, InitMQ, InitEtcdClient, InitWorkWx)
